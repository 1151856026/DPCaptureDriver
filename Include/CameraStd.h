///////////////////////////////////////////////////////////////////////////////
//#Summary	Header file for OLYMPUS Microscopy Digital Camera Library
//
//#History	03/15/2002	Hitoshi Ueda	Creation
//			03/18/2002	Kotaro Shimizu	Modification
//										1. changed CAM_OBJECT type
//										2. added CAM_MAX_LUT_SIZE def.
//										3. added Process switch def.
//			03/28/2002	Kotaro Shimizu	Modification
//										1. kCAM_AE_INVALID_REAGION ->
//														kCAM_AE_INVALID_REGION
//			04/11/2002	Kotaro Shimizu	Modification
//										1. kCAM_AE_INVALID_EVAL_FUNCTON ->
//												kCAM_AE_INVALID_EVAL_FUNCTION
//			04/12/2002	Kotaro Shimizu	Modification
//										1. added kCAM_INVALID_CALLBACK_FUNC
//										2. kCAM_AE_INVALID_EVAL_FUNCTION ->
//												kCAM_AE_INVALID_EVAL_FUNC
//			04/19/2002	Kotaro Shimizu	Modification
//										1. added kCAM_NOT_SUPPORTED
//			05/18/2002	Kotaro Shimizu	Modification
//										1. added kCAM_EST_CANNOT_SET_DEVICE_DEBUG_REG
//										   added kCAM_EST_CANNOT_GET_DEVICE_DEBUG_REG
//			07/24/2002	Kotaro Shimizu	Deletion
//										1. deleted #include "Mal.h"
//			08/23/2002	Kotaro Shimizu	Modification
//										1. changed enum tagCAM_IP_SHARPNESS
//			08/24/2002	Kotaro Shimizu	Modification
//										1. added kCAM_WB_CALIBLATE_TIMEOUT (ErrorID)
//										   added kCAM_BB_CALIBLATE_TIMEOUT (ErrorID)
//										2. added kCAM_WB_CALIBLATEEX (MessageID)
//										   added kCAM_BB_CALIBLATEEX (MessageID)
//			--------------------------------------------------------------------
//			01/21/2003 Kotaro Shimizu	Modification
//										1. created CAM_SIA_BINNING_MODE
//			01/31/2003 Kotaro Shimizu	2. added kCAM_SIA_CANNOT_SET_SPECIFIED_IMAGE_SIZE
//										   added kCAM_SIA_INVALID_BINNING_MODE
//										   added kCAM_SIA_CANNOT_SET_SPECIFIED_BINNING_MODE
//			09/09/2003 Ken Enjoji		Modification
//										1. added kCAM_INITIALIZE_DEFAULT
//										2. added kCAM_INITIALIZE_NONE
//			10/01/2003 Ken Enjoji		Modification
//										1. added
//											kCAM_SIA_INVALID_SHIFT_BITS_FOR_16
//			10/14/2003 Ken Enjoji		Modification
//										1. added CAM_IP_CONTRAST_MODE
//			10/27/2003 Ken Enjoji		Modification
//										1. added kCAM_AE_UNKNOWN_EXPOSED
//										2. added kCAM_EXP_SETMODEEX
//			12/02/2003 Ken Enjoji		Modification
//										1. added kCAM_DLL_CAMDRIVER
//										2. added kCAM_DLL_CAMBOARD
//										3. added kCAM_MAX_VERSION_STRING_LENGTH
//			12/11/2003 Ken Enjoji		Modification
//										1. added CAM_LV_EXPOSURE_MODE
//			12/12/2003 Ken Enjoji		Modification
//										1. added kCAM_EXP_INVALID_EXPOSURE_MODE
//			12/15/2003 Ken Enjoji		Modification
//										1. added kCAM_IP_SHARPNESS_OFF
//										2. added kCAM_IP_SHARPNESS_NOISE_REDUCTION1
//										3. added kCAM_IP_SHARPNESS_NOISE_REDUCTION2
//										4. added CAM_EXP_CCD_SENSITIVITY_MODE
//										5. added CAM_IP_NOISE_REDUCTION
//			12/18/2003 Ken Enjoji		Modification
//										1. added kCAM_CAMARA_FROM1_VERITY_ERROR
//										2. added kCAM_CAMARA_FROM2_VERITY_ERROR
//										3. added kCAM_IFCARD_DEVICE_CAMERA_ERROR
//										4. added KCAM_CAMERA_NO_CAMPS
//										5. added kCAM_EXTERNAL_TRIGGER_INPUTEX
//			12/18/2003 KaWaHaTa			Modification
//										1. added CAM_REC_BINNING_MODE
//			01/06/2004 KaWaHaTa			Modification
//										1. added CAM_DISK_SIZE_EX
//			01/13/2004 KaWaHaTa			Modification
//										1. added kCAM_REC_STOPEX
//			01/22/2004 Ken Enjoji		Modification
//										1. added kCAM_REC_INVALID_FILENAME
//										2. added kCAM_REC_INVALID_TRIMMINGREGION
//			01/27/2004 Ken Enjoji		Modification
//										1. added kCAM_IFCARD_ID
//			02/06/2004 KaWaHaTa			Modification
//										1. added kCAM_REC_ALL_CH_STOPEX
//										2. added kCAM_REC_STOP_NORMAL
//										3. added kCAM_REC_STOP_BUFFER_FULL
//										4. added kCAM_REC_STOP_REC_TIME_OVER
//										5. added kCAM_REC_STOP_PLAY_TIME_OVER
//										6. added kCAM_REC_STOP_INSUFFICIENT_DISK_SPACE
//										7. added kCAM_REC_STOP_CLOSE_TO_MAX_FILE_SIZE
//										8. added kCAM_REC_STOP_WRITE_ERROR
//			02/17/2004 KaWaHaTa			Modification
//										1. added kCAM_REC_INVALID_FORMAT
//										2. added kCAM_REC_INVALID_FRAMETIME
//										3. added kCAM_REC_1FRAMERECORDEX
//										4. added CAM_IMAGE_EX
//			02/17/2004 Ken Enjoji		Modification
//										1. added kCAM_LIGHT_PATH_SHUTTERSTATEEX
//										2. added tagCAM_LIGHT_PATH_SHUTTER_STATE
//										3. added
//										 kCAM_LIGHTPATH_SHUTTER_DEVICE_ERROR
//										4. added kCAM_LIGHTPATH_SHUTTER_ERROR
//			02/18/2004 Ken Enjoji		Modification
//										1. added
//										 kCAM_INVALID_LIGHT_PATH_SHUTTER_STATE
//										2.kCAM_EXP_INVALID_CCDSENSITIVITY_MODE
//										Å®kCAM_EXP_INVALID_CCD_SENSITIVITY_MODE
//										3.LIGHTPATHÅ®LIGHT_PATH
//			02/19/2004 Ken Enjoji		Modification
//										1. added kCAM_SIA_CCD_IMAGE_NORMAL_RAW
//										2. added kCAM_SIA_CCD_IMAGE_NORMAL_RAW_BINNING2
//										3. added kCAM_SIA_CCD_IMAGE_NORMAL_RAW_BINNING4
//										4. added kCAM_SIA_CCD_IMAGE_NORMAL_RAW_BINNING8
//										5. added kCAM_IP_RAW
//										6. added kCAM_IP_RAW_BB
//			03/02/2004 Ken Enjoji		Modification
//										1. added kCAM_EXP_INVALID_REAL_EXPOSURE_LIMIT
//										2. added kCAM_EST_INVALID_TEMPERATURE_TYPE
//										3. added tagCAM_TEMPERATURE_TYPE_EX
//			03/04/2004 Ken Enjoji		Modification
//										1. added kCAM_IP_NOISE_REDUCTION_ON_DARK_2
//										2. added kCAM_IP_NOISE_REDUCTION_ON_DARK_4
//										3. added kCAM_IP_NOISE_REDUCTION_ON_DARK_8
//			03/12/2004 Ken Enjoji		Modification
//										1. organized and CAM_CALLBACK_ID enum order
//										2. MAX_CALLBACK_ID
//			03/17/2004 Ken Enjoji		Modification
//										1. added kCAM_IP_CAPTURE_DARK_IMAGEEX
//										2. added kCAM_IP_CAPTURE_DARK_IMAGE_TIMEOUT
//			03/18/2004 Ken Enjoji		Modification
//										1. added kCAM_IP_NOISE_REDUCTION_ON_DARK_ONLY
//										2. deleted kCAM_IP_NOISE_REDUCTION_ON_DARK2
//										3. deleted kCAM_IP_NOISE_REDUCTION_ON_DARK4
//										4. deleted kCAM_IP_NOISE_REDUCTION_ON_DARK8
//										5. deleted kCAM_IP_CAPTURE_DARK_IMAGE_TIMEOUT
//										6. added kCAM_IP_INVALID_DARK_IMAGE_TIMES
//			03/29/2004 Ken Enjoji		Modification
//										1. kCAM_EXP_INVALID_EXPOSURE_MODE
//											Å®kCAM_EXP_INVALID_GAINED_EXPOSURE_MODE
//										2.CAM_EXP_EXPOSURE_MODEÅ®CAM_EXP_GAINED_EXPOSURE_MODE
//			04/06/2004 Ken Enjoji		Modification
//										1. MAX_CALLBACK_ID
//			04/13/2004 Ken Enjoji		Modification
//										1. added kCAM_SIA_CAPTURE_DARKEX
//			04/14/2004 Ken Enjoji		Modification
//										1. added kCAM_SIA_INVALID_NOISE_REDUCTION_MODE
//			04/15/2004 ken Enjoji		Modification
//										1. added kCAM_CAMERA_CASE_HOT_WARNING
//			05/27/2004 Ken Enjoji		Modification
//										1. added kCAM_LIGHT_PATH_SHUTTER_TO_AUTO
//			06/29/2004 Ken Enjoji		Modification
//										1. added kCAM_IP_NOISE_REDUCTION_WITHOUT_DARK
//										2. added kCAM_IP_NOISE_REDUCTION_WITH_DARK
//			07/28/2004 Ken Enjoji		Modification
//										Apply to Coding rule
//			06/20/2005 Ken Enjoji		Modification
//										1. added kCAM_INVALID_OPEN_DELAY
//										2. added kCAM_IP_INVALID_CUSTOM_BW_COEFFICIENT
//										3. added kCAM_CAMERA_HEAD_POWER_ERROR
//										4. added kCAM_CAMERA_PELTIER_POWER_ERROR
//										5. added kCAM_IP_YUV
//										6. added kCAM_IP_CUSTOM_BLACK_AND_WHITE
//			06/22/2005 Ken Enjoji		Modification
//										1. added kCAM_SIA_INVALID_COLOR_MODE
//			06/24/2005 Ken Enjoji		Modification
//										1. added kCAM_LV_INVALID_BYTES_A_CHANNEL
//										2. added kCAM_LV_INVALID_SHIFT_BITS_FOR_16
//										3. added kCAM_LV_INVALID_COLOR_MODE_AND_BYTES_A_CHANNEL
//			06/30/2005 Ken Enjoji		Modification
//										1. added kCAM_CAMERA_ROM_ERASE_ERROR
//										2. added kCAM_CAMERA_ROM_WRITE_ERROR
//										3. added kCAM_CAMERA_FW_ERROR
//			07/07/2005 Ken Enjoji		Modification
//										1. added tagCAM_EST_UPDATE_TARGET
//										2. added tagCAM_EST_UPDATE_DATA
//										3. added kCAM_EST_PREPARED_UPDATEEX
//										4. added kCAM_EST_INITIALIZE_UPDATEEX
//										5. added kCAM_EST_ERROR_UPDATEEX
//										6. added kCAM_EST_PROGRESS_UPDATEEX
//			09/01/2005 Ken Enjoji		Modification
//										1. added kCAM_EST_UPDATE_BOOT
//			09/21/2005 Ken Enjoji		Modification
//										1. added CAM_EST_BEHAVIOR_MODE
//			10/21/2005 Ken Enjoji		Modification
//										1. added kCAM_IFCARD_CISC_BOOT
//			11/01/2005 Ken Enjoji		Modification
//										1. added kCAM_CAMERA_OS_REBOOT
//			11/14/2005 Ken Enjoji		Modification
//										1. added kCAM_UPDATE_ERROR
//			11/22/2005 Ken Enjoji		Modification
//										1. added kCAM_EXTERNAL_TRIGGER_STATE_AUTO
//										2. added kCAM_EXTERNAL_TRIGGER_STATE_ACTIVE
//										3. added kCAM_EXTERNAL_TRIGGER_STATE_PASSIVE
//			07/06/2006 Ken Enjoji		Modification
//										1. added CAM_VIRTUAL_LEVEL
//			03/27/2007 Ken Enjoji		Modification
//										1. added kCAM_SYS_MALAD
//			04/03/2007 Shimokawa		1. added CAM_IMAGE_INFO
//			07/18/2007 Ken Enjoji		1. added kCAM_LNK_RECEIVE
//			07/19/2007 Hiroyuki Omuro	1. added CAM_LNK_STATUS
//										2. added CAM_LNK_ERROR_STATUS
//										3. added kCAM_LNK_SEND
//			10/03/2007 Ken Enjoji		1. added kCAM_IP_INVALID_COLOR_SPACE_MODE
//										2. added CAM_IP_COLOR_SPACE_MODE
//			Dec/17/2007	Ken Enjoji		1. added kCAM_DBG_DUMMY
//			Jan/16/2008	Ken Enjoji		added kCAM_LNK_INVALID_SEND_SIZE
//			Jan/17/2008	Ken Enjoji		added kCAM_LNK_INVALID_BAUDRATE
//			Jan/23/2008	Ken Enjoji		added kCAM_LNK_NO_DEVICE, kCAM_LNK_UART_ERROR
//			Feb/04/2008	Hiroyuki Omuro	added kCAM_LNK_RECEIVE_READY
//			Jul/01/2009	Naoki Morita	1. added kCAM_REC_AVICMPDATA
//										2. added kCAM_REC_AVI_COMPRESS
///////////////////////////////////////////////////////////////////////////////
#ifndef	___CAMERA_STD_H___	//{{
#define	___CAMERA_STD_H___

//
// Include system files.
//
#include	<windows.h>
#pragma warning(push, 3)
#include	<winioctl.h>
#pragma warning(pop)
#include	<memory.h>
#include	<string.h>
#include	<stdio.h>
#include	<math.h>

// Inport or Export selection
#ifdef	CAMDRIVER_EXPORTS
#define		CAMDRIVER_API	__declspec(dllexport)
#else
#define		CAMDRIVER_API	__declspec(dllimport)
#endif


////////////////////////////////////////////////////////////////////////////////
// Parameter Definition 
//
#define CAM_MAX_NUM_OF_CAMERA			(9+1)	// Maximum number of the camera. (includeing tetminatoer)
#define CAM_MAX_NUM_OF_CAMERA_NAME		(32+1)	// Maximum number of character of the camera name. (including NULL terminator)
#define CAM_MAX_VERSION_STRING_LENGTH	32		// Maximum number of character for the vertion string (including NULL terminator)

#define CAM_LUT_RED						0		// Read channel for LUT
#define	CAM_LUT_GREEN					1		// Green channel for LUT
#define	CAM_LUT_BLUE					2		// BLUE channel for LUT
#define CAM_LUT_RGB						3		// RGB channel for LUT. This is not used by camera library I/F
#define CAM_MAX_LUT_SIZE				4096	// Maximum LUT size

#define kCAM_IP_OB_CLAMP						0x01	// Optical Black ON
#define kCAM_IP_GAMMA_CORRECTION 				0x02	// Gamma Correction ON
#define kCAM_IP_SHARPNESS_FILTER 				0x04	// Sharpness fileter ON
#define kCAM_IP_SHARPNESS_FILTERCHROMATIC_CLAMP	0x08
#define kCAM_IP_COLORCORRECTION3x4				0x10
#define kCAM_IP_SPECIFIC_CHROMATICCORRECTION	0x20

// Initialize parameter
#define kCAM_INITIALIZE_NONE	((void*) 0)
#define kCAM_INITIALIZE_DEFAULT	((void*) 1)
#define MIN_INITIALIZE_PARAM	kCAM_INITIALIZE_NONE
#define MAX_INITIALIZE_PARAM	kCAM_INITIALIZE_DEFAULT
#define NUM_INITIALIZE_PARAM	2

// Callback ID
typedef enum tagCAM_CALLBACK_ID	
{// Status
	kCAM_INITCAMERAEX,
	kCAM_ERROREX,
	kCAM_1FRAMETRANSFEREX,
	kCAM_SIA_CAPTUREEX,
	kCAM_WB_CALIBRATEEX,
	kCAM_BB_CALIBRATEEX,
	kCAM_EXP_SETMODEEX,
	kCAM_REC_1FRAMERECORDEX,
	kCAM_REC_STOPEX,
	kCAM_REC_ALL_CH_STOPEX,
	kCAM_REC_FINISHEX,
	kCAM_EXTERNAL_TRIGGER_INPUTEX,	// *** DP30
	kCAM_LIGHT_PATH_SHUTTERSTATEEX,	// *** DP30
	kCAM_IP_CAPTURE_DARK_IMAGEEX,	// *** DP30

	kCAM_EST_PREPARED_UPDATEEX,		// *** DP71
	kCAM_EST_INITIALIZE_UPDATEEX,	// *** DP71
	kCAM_EST_ERROR_UPDATEEX,		// *** DP71
	kCAM_EST_PROGRESS_UPDATEEX,		// *** DP71

	kCAM_LNK_RECEIVE,			// *** DP72
	kCAM_LNK_SEND,				// *** DP72
	kCAM_LNK_RECEIVE_READY,		// *** DP72

	kCAM_EST_LEVEL_DIFF,		// DP22/DP27 

	NUMBER_OF_CALLBACK_ID
}CAM_CALLBACK_ID;
#define MIN_CALLBACK_ID	kCAM_INITCAMERAEX
#define MAX_CALLBACK_ID	kCAM_EST_LEVEL_DIFF
#define NUM_CALLBACK_ID	NUMBER_OF_CALLBACK_ID

// AE Lock State
typedef enum tagCAM_AE_LOCK_STATE
{
	CAM_AE_LOCK = 0,
	CAM_AE_FREE,
	NUMBER_OF_AE_LOCK_STATE
} CAM_AE_LOCK_STATE, *PCAM_AE_LOCK_STATE;
#define MIN_AE_LOCK_STATE	CAM_AE_LOCK
#define MAX_AE_LOCK_STATE	CAM_AE_FREE
#define NUM_AE_LOCK_STATE	NUMBER_OF_AE_LOCK_STATE
#define DFL_AE_LOCK_STATE	CAM_AE_FREE

// AE Status
typedef enum tagCAM_AE_STATUS
{
	kCAM_AE_UNDER_EXPOSED = 0,
	kCAM_AE_GOOD_EXPOSED,
	kCAM_AE_OVER_EXPOSED,
	kCAM_AE_UNKNOWN_EXPOSED,
	NUMBER_OF_AE_STATUS
} CAM_AE_STATUS, *PCAM_AE_STATUS;
#define MIN_AE_STATUS	kCAM_AE_UNDER_EXPOSED
#define MAX_AE_STATUS	kCAM_AE_UNKNOWN_EXPOSED
#define NUM_AE_STATUS	NUMBER_OF_AE_STATUS
//#define DFL_AE_STATUS	kCAM_AE_GOOD_EXPOSED

// Exposure Mode
typedef enum tagCAM_EXP_MODE
{
	kCAM_EXP_MANUAL = 0,
	kCAM_EXP_AE_NORMAL,
	kCAM_EXP_AE_SFL,
	kCAM_EXP_AE_CUSTOM,
	kCAM_EXP_AE_NORMAL_PAUSE,
	kCAM_EXP_AE_SFL_PAUSE_SENSITIVE,
	kCAM_EXP_AE_SFL_PAUSE_LOW_SENSITIVE,
	kCAM_EXP_AE_NORMAL_ONE_TIME,
	kCAM_EXP_AE_SFL_ONE_TIME,
	kCAM_EXP_AE_SFL2,
	kCAM_EXP_AE_SFL2_ONE_TIME,
	kCAM_EXP_AE_SFL2_PAUSE_SENSITIVE,
	kCAM_EXP_AE_SFL2_PAUSE_LOW_SENSITIVE,
	NUMBER_OF_EXP_MODE
} CAM_EXP_MODE, *PCAM_EXP_MODE;
#define MIN_EXP_MODE	kCAM_EXP_MANUAL
#define MAX_EXP_MODE	kCAM_EXP_AE_SFL2_PAUSE_LOW_SENSITIVE
#define NUM_EXP_MODE	NUMBER_OF_EXP_MODE
#define DFL_EXP_MODE	kCAM_EXP_AE_NORMAL

// WB Mode
typedef enum tagCAM_WB_MODE
{
	kCAM_WB_AUTO,
	kCAM_WB_OTWB,
	kCAM_WB_MANUAL,
	kNUMBER_OF_CAM_WB_MODE
}CAM_WB_MODE,*PCAM_WB_MODE;
#define MIN_WB_MODE		kCAM_WB_AUTO
#define MAX_WB_MODE		kCAM_WB_MANUAL

// BB Mode
typedef enum tagCAM_BB_MODE
{
	kCAM_BB_MANUAL,
	kNUMBER_OF_CAM_BB_MODE
}CAM_BB_MODE,*PCAM_BB_MODE;
#define MIN_BB_MODE		kCAM_BB_MANUAL
#define MAX_BB_MODE		kCAM_BB_MANUAL

// IP Orientation
// History	03/05/2002 Kotaro Shimizu Creation
typedef enum tagCAM_IP_ORIENTATION
{
	kCAM_IP_NORMAL_ORIENTATION,
	kCAM_IP_FLIP_VIRTICAL,
	kCAM_IP_FLIP_HORIZONTAL,
	kCAM_IP_ROTATE_180,
	NUMBER_OF_IP_ORIENTATION
}CAM_IP_ORIENTATION, *PCAM_IP_ORIENTATION;
#define MIN_IP_ORIENTATION	kCAM_IP_NORMAL_ORIENTATION
#define MAX_IP_ORIENTATION	kCAM_IP_ROTATE_180
#define NUM_IP_ORIENTATION	NUMBER_OF_IP_ORIENTATION
#define DFL_IP_ORIENTATION	kCAM_IP_NORMAL_ORIENTATION

// IP Sharpness
// History	08/23/2002 Kotaro Shimizu Modification
typedef enum tagCAM_IP_SHARPNESS
{
	kCAM_IP_SHARPNESS_SOFT,
	kCAM_IP_SHARPNESS_NORMAL,
	kCAM_IP_SHARPNESS_STRONG,
	kCAM_IP_SHARPNESS_OFF,					// *** DP30
	kCAM_IP_SHARPNESS_OFF_NR,				// *** DP30
	kCAM_IP_SHARPNESS_STRONG2,				// *** DP30
	kCAM_IP_SHARPNESS_STRONG3,				// DP73 
	NUMBER_OF_IP_SHARPNESS
} CAM_IP_SHARPNESS;
#define MIN_IP_SHARPNESS	kCAM_IP_SHARPNESS_SOFT
#define MAX_IP_SHARPNESS	kCAM_IP_SHARPNESS_STRONG3
#define NUM_IP_SHARPNESS	NUMBER_OF_IP_SHARPNESS
#define DFL_IP_SHARPNESS	kCAM_IP_SHARPNESS_NORMAL

// IP Noise Reduction	*** DP30
typedef enum tagCAM_IP_NOISE_REDUCTION
{
	kCAM_IP_NOISE_REDUCTION_OFF,
	kCAM_IP_NOISE_REDUCTION_ON,
	kCAM_IP_NOISE_REDUCTION_ON_DARK,
	kCAM_IP_NOISE_REDUCTION_DARK_ONLY,
	NUMBER_OF_IP_NOISE_REDUCTION
} CAM_IP_NOISE_REDUCTION;
#define MIN_IP_NOISE_REDUCTION	kCAM_IP_NOISE_REDUCTION_OFF
#define MAX_IP_NOISE_REDUCTION	kCAM_IP_NOISE_REDUCTION_DARK_ONLY
#define NUM_IP_NOISE_REDUCTION	NUMBER_OF_IP_NOISE_REDUCTION
#define DFL_IP_NOISE_REDUCTION	kCAM_IP_NOISE_REDUCTION_OFF

#define kCAM_IP_NOISE_REDUCTION_WITHOUT_DARK	kCAM_IP_NOISE_REDUCTION_ON
#define kCAM_IP_NOISE_REDUCTION_WITH_DARK		kCAM_IP_NOISE_REDUCTION_ON_DARK


// IP Color Mode
typedef enum tagCAM_IP_COLOR_MODE
{
	kCAM_IP_COLOR,
	kCAM_IP_BLACK_AND_WHITE,
	kCAM_IP_RAW,				// *** DP30BW
	kCAM_IP_RAW_BB,				// *** DP30BW
	kCAM_IP_YUV,				// *** DP71
	kCAM_IP_CUSTOM_BLACK_AND_WHITE,	// ***DP71
	kCAM_IP_COLOR1,				// New DP21
	kCAM_IP_COLOR2,				// Bew DP21	
	kCAM_IP_BLACK_AND_WHITE2,	// New DP73(OutputFormat is 3ch) 
	kCAM_IP_COLOR3,				// New DP22/DP27 
	NUMBER_OF_IP_COLOR_MODE
} CAM_IP_COLOR_MODE;
#define MIN_IP_COLOR_MODE	kCAM_IP_COLOR
#define MAX_IP_COLOR_MODE	kCAM_IP_COLOR3
#define NUM_IP_COLOR_MODE	NUMBER_OF_IP_COLOR_MODE
#define DFL_IP_COLOR_MODE	kCAM_IP_COLOR

// IP Color Channel
typedef enum tagCAM_IP_COLOR_CHANNEL
{
	kCAM_IP_COLOR_LUMINANCE_CHANNEL,
	kCAM_IP_COLOR_RED_CHANNEL,
	kCAM_IP_COLOR_GREEN_CHANNEL,
	kCAM_IP_COLOR_BLUE_CHANNEL,
	NUMBER_OF_IP_COLOR_CHANNEL
} CAM_IP_COLOR_CHANNEL;
#define MIN_IP_COLOR_CHANNEL	kCAM_IP_COLOR_LUMINANCE_CHANNEL
#define MAX_IP_COLOR_CHANNEL	kCAM_IP_COLOR_BLUE_CHANNEL
#define NUM_IP_COLOR_CHANNEL	NUMBER_OF_IP_COLOR_CHANNEL

// IP Contrast Mode
typedef enum tagCAM_IP_CONTRAST_MODE
{
	kCAM_IP_CONTRAST_MODE_LOW,
	kCAM_IP_CONTRAST_MODE_NORMAL,
	kCAM_IP_CONTRAST_MODE_HIGH,
	kCAM_IP_CONTRAST_MODE_LINEAR,	// *** DP30 add
	kCAM_IP_CONTRAST_MODE_MEDIUM,	// New DP22/DP27 
	NUMBER_OF_IP_CONTRAST_MODE
} CAM_IP_CONTRAST_MODE;
#define MIN_IP_CONTRAST_MODE	kCAM_IP_CONTRAST_MODE_LOW
#define MAX_IP_CONTRAST_MODE	kCAM_IP_CONTRAST_MODE_MEDIUM
#define NUM_IP_CONTRAST_MODE	NUMBER_OF_IP_CONTRAST_MODE
#define DFL_IP_CONTRAST_MODE	kCAM_IP_CONTRAST_MODE_NORMAL

// LV Binning Mode
typedef enum tagCAM_LV_BINNING_MODE
{
	kCAM_LV_BINNING_OFF,
	kCAM_LV_BINNING_2x2,
	kCAM_LV_BINNING_4x4,
	kCAM_LV_BINNING_8x8,			// *** DP30 add
	NUMBER_OF_BINNING_MODE
}CAM_LV_BINNING_MODE,*PCAM_LV_BINNING_MODE;
#define MIN_LV_BINNING_MODE	kCAM_LV_BINNING_OFF
#define MAX_LV_BINNING_MODE	kCAM_LV_BINNING_8x8
#define NUM_LV_BINNING_MODE	NUMBER_OF_BINNING_MODE
#define DFL_LV_BINNING_MODE	kCAM_LV_BINNING_OFF

// Exposure Mode
typedef enum tagCAM_EXP_GAINED_EXPOSURE_MODE	// DP30 add
{
	kCAM_EXP_GAINED_EXPOSURE,
	kCAM_EXP_REAL_EXPOSURE,
	NUMBER_OF_GAINED_EXPOSURE_MODE
}CAM_EXP_GAINED_EXPOSURE_MODE,*PCAM_EXP_GAINED_EXPOSURE_MODE;
#define MIN_EXP_GAINED_EXPOSURE_MODE	kCAM_EXP_GAINED_EXPOSURE
#define MAX_EXP_GAINED_EXPOSURE_MODE	kCAM_EXP_REAL_EXPOSURE
#define NUM_EXP_GAINED_EXPOSURE_MODE	NUMBER_OF_GAINED_EXPOSURE_MODE
#define DFL_EXP_GAINED_EXPOSURE_MODE	kCAM_EXP_GAINED_EXPOSURE

// CCD Sensitivity Mode
typedef enum tagCAM_EXP_CCD_SENSITIVITY_MODE	// DP30 add
{
	kCAM_EXP_CCD_SENSITIVITY_NORMAL,
	kCAM_EXP_CCD_SENSITIVITY_NIRM,
	kCAM_EXP_CCD_SENSITIVITY_NIRH,
	NUMBER_OF_CCD_SENSITIVITY_MODE
}CAM_EXP_CCD_SENSITIVITY_MODE,*PCAM_EXP_CCD_SENSITIVITY_MODE;
#define MIN_EXP_CCD_SENSITIVITY_MODE	kCAM_EXP_CCD_SENSITIVITY_NORMAL
#define MAX_EXP_CCD_SENSITIVITY_MODE	kCAM_EXP_CCD_SENSITIVITY_NIRH
#define NUM_EXP_CCD_SENSITIVITY_MODE	NUMBER_OF_CCD_SENSITIVITY_MODE
#define DFL_EXP_CCD_SENSITIVITY_MODE	kCAM_EXP_CCD_SENSITIVITY_NORMAL

// Light Path Shutter State
typedef enum tagCAM_LIGHTPATH_SHUTTER_STATE	// DP30 add
{
	kCAM_LIGHT_PATH_SHUTTER_AUTO,
	kCAM_LIGHT_PATH_SHUTTER_OPEN,
	kCAM_LIGHT_PATH_SHUTTER_CLOSE,
	kCAM_LIGHT_PATH_SHUTTER_TO_AUTO,
	kCAM_LIGHT_PATH_SHUTTER_OPENING,
	kCAM_LIGHT_PATH_SHUTTER_CLOSING,
	kCAM_LIGHT_PATH_SHUTTER_ERROR,
	NUMBER_OF_LIGHT_PATH_SHUTTER_STATE,
}CAM_LIGHT_PATH_SHUTTER_STATE_EX,*PCAM_LIGHT_PATH_SHUTTER_STATE_EX;
#define MIN_LIGHT_PATH_SHUTTER_STATE	kCAM_LIGHT_PATH_SHUTTER_AUTO
#define MAX_LIGHT_PATH_SHUTTER_STATE	kCAM_LIGHT_PATH_SHUTTER_ERROR
#define NUM_LIGHT_PATH_SHUTTER_STATE	NUMBER_OF_LIGHT_PATH_SHUTTER_STATE
#define DFL_LIGHT_PATH_SHUTTER_STATE	kCAM_LIGHT_PATH_SHUTTER_AUTO

// External Trigger
typedef enum tagCAM_EXTERNAL_TRIGGER_STATE_EX	// DP71 add
{
	kCAM_EXTERNAL_TRIGGER_STATE_AUTO,
	kCAM_EXTERNAL_TRIGGER_STATE_ACTIVE,
	kCAM_EXTERNAL_TRIGGER_STATE_PASSIVE,
	NUMBER_OF_EXTERNAL_TRIGGER_STATE,
}CAM_EXTERNAL_TRIGGER_STATE_EX,*PCAM_EXTERNAL_TRIGER_STATE_EX;
#define MIN_EXTERNAL_TRIGGER_STATE	kCAM_EXTERNAL_TRIGGER_STATE_AUTO
#define MAX_EXTERNAL_TRIGGER_STATE	kCAM_EXTERNAL_TRIGGER_STATE_PASSIVE
#define NUM_EXTERNAL_TRIGGER_STATE	NUMBER_OF_EXTERNAL_TRIGGER_STATE
#define DFL_EXTERNAL_TRIGGER_STATE	kCAM_EXTERNAL_TRIGGER_STATE_AUTO

////////////////////////////////////////////////////////////////////////////////
//#Name	Live image status
//
//#Summary	
//
//#Details	
//
//#History	09/30/2001	Kotaro Shimizu	creation.
//			03/21/2014	S.Ogiwara
////////////////////////////////////////////////////////////////////////////////
typedef enum tagCAM_LV_MOVIE_STATE
{// Live image status
	kCAM_LV_RUNNING = 0,
	kCAM_LV_NOT_RUNNING
} CAM_LV_MOVIE_STATE;

// REC Binning Mode
typedef enum tagCAM_REC_BINNING_MODE
{
	kCAM_REC_BINNING_OFF,
	kCAM_REC_BINNING_2x2,
	kCAM_REC_BINNING_4x4,
	kCAM_REC_BINNING_8x8,		// *** DP30 add
	NUMBER_REC_BINNING_MODE
} CAM_REC_BINNING_MODE;
#define MIN_REC_BINNING_MODE	kCAM_REC_BINNING_OFF
#define MAX_REC_BINNING_MODE	kCAM_REC_BINNING_8x8
#define NUM_REC_BINNING_MODE	NUMBER_REC_BINNING_MODE
#define DFL_REC_BINNING_MODE	kCAM_REC_BINNING_OFF

// REC Record Mode
typedef enum tagCAM_REC_RECORD_MODE
{
	kCAM_REC_STORE_TO_FILE,	// old	kCAM_REC_RECORD_FLUSH,
	kCAM_REC_STORE_TO_MEMORY_FIRST, // old kCAM_REC_RECORD_CACHE,
	NUMBER_REC_RECORD_MODE,
} CAM_REC_RECORD_MODE;
#define MIN_REC_RECORD_MODE	kCAM_REC_STORE_TO_FILE
#define MAX_REC_RECORD_MODE	kCAM_REC_STORE_TO_MEMORY_FIRST
#define NUM_REC_RECORD_MODE	NUMBER_REC_RECORD_MODE
#define DFL_REC_RECORD_MODE	kCAM_REC_STORE_TO_FILE

// Record format
#define kCAM_REC_AVIRAWDATA 'AVIR'
#define kCAM_REC_AVICMPDATA 'AVIC'
#define kCAM_REC_AV2ACPDATA 'AV2A'	// AVI2.0 w/ Audio  Add 2014.03.21 S.Ogiwara
#define kCAM_REC_AV2NCPDATA 'AV2N'	// AVI2.0 w/o Audio Add 2014.03.21 S.Ogiwara
#define kCAM_REC_MPEG1VIDEO 'MPG1'

typedef enum tagCAM_REC_FORMAT
{
	kCAM_REC_AVI,
	kCAM_REC_MPEG1_HIGH_QUALITY,
	kCAM_REC_MPEG1_MEDIUM_QUALITY,
	kCAM_REC_MPEG1_LOW_QUALITY,
	kCAM_REC_AVI_COMPRESS,
	kCAM_REC_AVI20AUDIO,			// AVI2.0 w/  Add 2014.03.21 S.Ogiwara
	kCAM_REC_AVI20NOAUDIO,			// AVI2.0 w/o Add 2014.03.21 S.Ogiwara
	NUMBER_REC_FORMAT,
} CAM_REC_FORMAT;
#define MIN_REC_FORMAT	kCAM_REC_AVI
#define MAX_REC_FORMAT	kCAM_REC_AVI20NOAUDIO	// kCAM_REC_AVI20 -> kCAM_REC_AVI20NOAUDIO (for AVI2.0 w/o Audio) 2014.03.21 S.Ogiwara
#define NUM_REC_FORMAT	NUMBER_REC_FORMAT
#define DFL_REC_FORMAT	kCAM_REC_AVI

// Record stop reason
typedef enum tagCAM_REC_STOP
{
	kCAM_REC_STOP_NORMAL,
	kCAM_REC_STOP_BUFFER_FULL,
	kCAM_REC_STOP_REC_TIME_OVER,
	kCAM_REC_STOP_PLAY_TIME_OVER,
	kCAM_REC_STOP_INSUFFICIENT_DISK_SPACE,
	kCAM_REC_STOP_CLOSE_TO_MAX_FILE_SIZE,
	kCAM_REC_STOP_WRITE_ERROR,
	NUMBER_REC_STOP
} CAM_REC_STOP;
#define MIN_REC_STOP	kCAM_REC_STOP_NORMAL
#define MAX_REC_STOP	kCAM_REC_STOP_WRITE_ERROR
#define NUM_REC_STOP	NUMBER_REC_STOP
#define DFL_REC_STOP	kCAM_REC_STOP_NORMAL



////////////////////////////////////////////////////////////////////////////////
//#Name	Stil-Image Capture Mode
//
//#Summary
//
//#Description	None
//
//#History	08/06/2001	Nakazato		Creaation
//			10/01/2001	Shimizu Kotaro	Addition
//			10/05/2001	Shimizu Kotaro	Modification
//										LAST_SIA_PRECAPTUREMODE
//									 -> NUMBER_OF_SIA_PRECAPTUREMODE
////////////////////////////////////////////////////////////////////////////////
typedef enum tagCAM_SIA_PRECAPTUREMODE
{// Status
	kCAM_SIA_PRECAPTURE_OFF = 0,	// Non Pre-capture
	kCAM_SIA_PRECAPTURE_1STFRAME,	// Pre-capture
	NUMBER_OF_SIA_PRECAPTUREMODE
}CAM_SIA_PRECAPTUREMODE;
#define MIN_SIA_PRECAPTUREMODE	kCAM_SIA_PRECAPTURE_OFF
#define MAX_SIA_PRECAPTUREMODE	kCAM_SIA_PRECAPTURE_1STFRAME
#define NUM_SIA_PRECAPTUREMODE	NUMBER_OF_SIA_PRECAPTUREMODE

// SIA Accumulate Mode <- Moved from CameraDP51.h 03/04/2002 KOTARO
typedef enum tagCAM_SIA_ACCUMULATE_MODE
{
	kCAM_SIA_NO_ACCUMULATION = 0,
	kCAM_SIA_ADDITION,
	kCAM_SIA_AVERAGE,
	NUMBER_OF_SIA_ACCMODE
} CAM_SIA_ACCUMULATE_MODE, *PCAM_SIA_ACCUMULATE_MODE;
#define MIN_SIA_ACCMODE	kCAM_SIA_NO_ACCUMULATION
#define MAX_SIA_ACCMODE	kCAM_SIA_AVERAGE
#define NUM_SIA_ACCMODE	NUMBER_OF_SIA_ACCMODE

// SIA Binning Mode
// History	01/21/2003 Kotaro Shimizu Creation
typedef enum tagCAM_SIA_BINNING_MODE
{
	kCAM_SIA_BINNING_OFF,
	kCAM_SIA_BINNING_2x2,
	kCAM_SIA_BINNING_4x4,
	kCAM_SIA_BINNING_8x8,		// *** DP30 add
	NUMBER_OF_SIA_BINNING_MODE
}CAM_SIA_BINNING_MODE, *PCAM_SIA_BINNING_MODE;
#define MIN_SIA_BINNING_MODE	kCAM_SIA_BINNING_OFF
#define MAX_SIA_BINNING_MODE	kCAM_SIA_BINNING_8x8
#define NUM_SIA_BINNING_MODE	NUMBER_OF_SIA_BINNING_MODE
#define DFL_SIA_BINNING_MODE	kCAM_SIA_BINNING_OFF

////////////////////////////////////////////////////////////////////////////////
//#Name		Device ID
//
//#Summary
//
//#Details
//
//#History	10/02/2001	Kotaro Shimizu	creation
//			10/05/2001	Kotaro Shimizu	modification	LAST_DEVICE_ID -> NUMBER_OF_DEVICE_ID
//			12/02/2003	Ken Enjoji		add				DLL Version
//			01/27/2004	Ken Enjoji		add				kCAM_IFCARD_ID
//			10/21/2005	Ken Enjoji		add				kCAM_IFCARD_CISC_BOOT
//			03/27/2007	Ken Enjoji		add				kCAM_SYS_MALAD
////////////////////////////////////////////////////////////////////////////////
typedef enum tagCAM_DEVICE_ID
{
	kCAM_CAMERA_HEAD = 0,		//  0:Camera Head
	kCAM_IFCARD,				//  1:PCI Board(Ver)
	kCAM_IFCARD_FPGA_DIP1,		//  2:DIP1(FPGA on PCI board)
	kCAM_IFCARD_FPGA_DIP2,		//  3:DIP2(FPGA on PCI board)
	kCAM_IFCARD_FPGA_SDRAMC,	//  4:SDRAMC(FPGA on PCI board)
	kCAM_IFCARD_CISC,			//  5:CISC(F/W Appl. on PCI board)
	kCAM_IFCARD_ID,				//  6:PCI Board ID
	kCAM_DLL_CAMDRIVER,			//  7:DLL CamDriver.dll
	kCAM_DLL_CAMBOARD,			//  8:DLL CamBoard.dll
	kCAM_IFCARD_CISC_BOOT,		//  9:CISC(F/W Boot on PCI board)
	kCAM_SYS_MALAD,				// 10:SYS MalAD.sys
	kCAM_IFCARD_EDIP_ID,		// 11:EDIP ID 
	kCAM_IFCARD_EDIP_VER,		// 12:EDIP VER 
	kCAM_IFCARD_CUID,			// 13:CU ID 
	kCAM_TG_ID,					// 14:TG ID 
	kCAM_TG_VER, 				// 15:TG Ver 
	kCAM_MC_ID,					// 16:MC ID 
	kCAM_MC_VER, 				// 17:MC Ver 
	kCAM_CFG_ID,				// 18:CFG ID 
	kCAM_CFG_VER, 				// 19:CFG Ver 
	kCAM_PCIE,					// 20:PCIExpress LinkUp 
	NUMBER_OF_DEVICE_ID
} CAM_DEVICE_ID;
#define MIN_DEVICE_ID	kCAM_CAMERA_HEAD
#define MAX_DEVICE_ID	kCAM_PCIE
#define NUM_DEVICE_ID	NUMBER_OF_DEVICE_ID
#define kCAM_MAX_VERSION_STRING_LENGTH 256
// Power State
//#History	03/01/2002
typedef enum tagCAM_POWER_STATE
{
	kCAM_POWER_ON,
	kCAM_POWER_OFF,
	NUMBER_OF_POWER_STATE
} CAM_POWER_STATE;
#define MIN_POWER_STATE	kCAM_POWER_ON
#define MAX_POWER_STATE	kCAM_POWER_OFF
#define NUM_POWER_STATE	NUMBER_OF_POWER_STATE

// LV CCD Image Type
typedef enum tagCAM_LV_CCD_IMAGE_TYPE
{
	kCAM_LV_CCD_IMAGE_NORMAL,
	kCAM_LV_CCD_IMAGE_BAYER,
	NUMBER_OF_LV_CCD_IMAGE_TYPE
}CAM_LV_CCD_IMAGE_TYPE,*PCAM_LV_CCD_IMAGE_TYPE;
#define MIN_LV_CCD_IMAGE_TYPE	kCAM_LV_CCD_IMAGE_NORMAL
#define MAX_LV_CCD_IMAGE_TYPE	kCAM_LV_CCD_IMAGE_BAYER
#define NUM_LV_CCD_IMAGE_TYPE	NUMBER_OF_LV_CCD_IMAGE_TYPE

// SIA CCD Image Type
typedef enum tagCAM_SIA_CCD_IMAGE_TYPE
{
	kCAM_SIA_CCD_IMAGE_NORMAL,
	kCAM_SIA_CCD_IMAGE_BAYER,				// *** DP70 
	kCAM_SIA_CCD_IMAGE_BAYER_SHIFTED,		// *** DP70 
	kCAM_SIA_CCD_IMAGE_NORMAL_RAW,			// *** DP30 
	kCAM_SIA_CCD_IMAGE_NORMAL_RAW_BINNING2,	// *** DP30 
	kCAM_SIA_CCD_IMAGE_NORMAL_RAW_BINNING4,	// *** DP30 
	kCAM_SIA_CCD_IMAGE_NORMAL_RAW_BINNING8,	// *** DP30 
	kCAM_SIA_CCD_IMAGE_BAYER_REGULATION,	// *** DP73 
	kCAM_SIA_CCD_IMAGE_BAYER_REGULATION_NOT_STITCH,	// *** DP73 
	kCAM_SIA_CCD_IMAGE_BAYER_CALIBRATION,	// *** DP74 
	NUMBER_OF_SIA_CCD_IMAGE_TYPE
}CAM_SIA_CCD_IMAGE_TYPE,*PCAM_SIA_CCD_IMAGE_TYPE;
#define MIN_SIA_CCD_IMAGE_TYPE	kCAM_SIA_CCD_IMAGE_NORMAL
#define MAX_SIA_CCD_IMAGE_TYPE	kCAM_SIA_CCD_IMAGE_BAYER_CALIBRATION
#define NUM_SIA_CCD_IMAGE_TYPE	NUMBER_OF_SIA_CCD_IMAGE_TYPE

// Debug Register
typedef enum tagCAM_DEBUG_REGISTER_EX
{
	kCAM_DBG_K4377_AFE,
	kCAM_DBG_K4377_TG,
	kCAM_DBG_K4377_ADC,
	kCAM_DBG_K4377_DAC,
	kCAM_DBG_K4377_DIP,
	kCAM_DBG_DUMMY,
	NUMBER_OF_DBG_REG
} CAM_DEBUG_REGISTER_EX;
#define MIN_DBG_REG		kCAM_DBG_K4377_AFE
#define MAX_DBG_REG		kCAM_DBG_DUMMY
#define NUM_DBG_REG		NUMBER_OF_DBG_REG

// Register DP21
typedef enum tagCAM_REGISTER_EX
{
	kCAM_CONFIG_CSR,
	kCAM_BF_CSR,
	kCAM_F7_M0_CSR,
	kCAM_F7_M1_CSR,
	kCAM_F7_M2_CSR,
	kCAM_F7_M3_CSR,
	kCAM_F7_M4_CSR,
	kCAM_F7_M5_CSR,
	kCAM_AF_CSR,
	kCAM_FT_CSR,
	kCAM_LOOKUP_TABLE_CSR,
	NUMBER_OF_CAMREG
} CAM_REGISTER_EX;
#define MIN_CAM_REG		kCAM_CONFIG_CSR
#define MAX_CAM_REG		kCAM_LOOKUP_TABLE_CSR
#define NUM_CAM_REG		NUMBER_OF_CAMREG

// Get Temperature Type
typedef enum tagCAM_TEMPERATURE_TYPE_EX
{
	kCAM_TEMPERATURE_SENSE_CCD,
	kCAM_TEMPERATURE_SENSE_EXTERNAL,
	kCAM_TEMPERATURE_TARGET_DIFFERENCE,	// *** DP70
	kCAM_TEMPERATURE_TARGET_ABSOLUTE,	// *** DP30
	kCAM_TEMPERATURE_SENSE_INTERNAL,	// *** DP30
	NUMBER_OF_TEMPERATURE_TYPE
}CAM_TEMPERATURE_TYPE_EX,*PCAM_TEMPERATURE_TYPE_EX;
#define MIN_TEMPERATURE_TYPE	kCAM_TEMPERATURE_SENSE_CCD
#define MAX_TEMPERATURE_TYPE	kCAM_TEMPERATURE_SENSE_INTERNAL
#define NUM_TEMPERATURE_TYPE	NUMBER_OF_TEMPERATURE_TYPE

// Color Space Mode
typedef enum tagCAM_IP_COLOR_SPACE_MODE
{
	kCAM_IP_SRGB,
	kCAM_IP_ADOBERGB,	// *** DP72
	NUMBER_OF_COLOR_SPACE_MODE
}CAM_IP_COLOR_SPACE_MODE,*PCAM_IP_COLOR_SPACE_MODE;
#define MIN_IP_COLOR_SPACE_MODE	kCAM_IP_SRGB
#define MAX_IP_COLOR_SPACE_MODE	kCAM_IP_ADOBERGB
#define NUM_IP_COLOR_SPACE_MODE	NUMBER_OF_COLOR_SPACE_MODE


////////////////////////////////////////////////////////////////////////////////
//#Name		Stil-Image Capture type.
//
//#Summary	
//
//#Description	
//
//#History	10/01/2001	Kotaro Shimizu	Creation
//			10/05/2001	Kotaro Shimizu	Added NUMBER_OF_SIA_CAPTURE_TYPE
//			10/28/2003	Ken Enjoji		Added
//										-kCAM_EXP_INVALID_APPROPRIATEEXPCOUNT
//										-kCAM_EXP_INVALID_ONETIME_TIMEOUT
//			02/18/2004	Ken Enjoji		Added
//										-kCAM_INVALID_LIGHT_PATH_SHUTTER_STATE
//			04/28/2004	Ken Enjoji		Added
//										-kCAM_SIA_CAPTURE_DARKEX
//			12/07/2015	S.Ogiwara		Added
//										-DP74 section
////////////////////////////////////////////////////////////////////////////////
typedef enum tagCAM_CAPTURE_TYPE
{
	kCAM_SIA_NORMALCAPTURE = 0,		// Normal capture 
	kCAM_SIA_PRECAPTURE,			// Pre-Capture 
	kCAM_SIA_CAPTURE_DARKEX,		// *** DP30
	kCAM_SIA_RANDOM_TRIGGER,		// DP73/DP80-RandomTrigger 
	NUMBER_OF_SIA_CAPTURE_TYPE
} CAM_CAPTURE_TYPE;
#define MIN_CAPTURE_TYPE	kCAM_SIA_NORMALCAPTURE
#define MAX_CAPTURE_TYPE	kCAM_SIA_CAPTURE_DARKEX
#define NUM_CAPTURE_TYPE	NUMBER_OF_SIA_CAPTURE_TYPE

// Error ID
#define CAM_ERR_NORMAL	0		// Normal error begin at 0
#define CAM_ERR_DETAIL	1000	// Detail error begin at 1000
#define CAM_ERR_WARNING	10000	// Warning begin at 10000
typedef enum tagCAM_ERROR
{
// Normal error begin at 0
// Common Error(0-10)
	kCAM_NO_ERROR = CAM_ERR_NORMAL,
	kCAM_API_INVALID_OBJECT,
	kCAM_API_INVALID_PARAM,
	kCAM_API_PARAM_OUT_OF_RANGE,
	kCAM_API_CALLED_IN_INVALID_STATE,
	kCAM_API_LIB_INITIALIZE_ERROR,
	kCAM_API_INTERNAL_ERROR,
	kCAM_WRONG_SYNCHRONIZED_MODE,
	kCAM_WINAPI_ERROR,
	kCAM_WINAPI_CANNOT_START_TIMEOUT_TIMER,
	kCAM_NOT_SUPPORTED,
// Errors relate to the camera setup.(11-23)
	kCAM_API_OBJECT_ALREADY_CREATED,
	kCAM_INVALID_CAMERA_ID,
	kCAM_CANNOT_COPY_ENUMERATED_CAMERA_ID,
	kCAM_INVALID_CAMERA_MODE,
	kCAM_INVALID_CALLBACK_ID,
	kCAM_INVALID_ERROR,
	kCAM_INVALID_CALLBACK_FUNC,
	kCAM_NO_CALLBACK_FUNC,
	kCAM_INITIALIZE_TIMEOUT,
	kCAM_INVALID_POWER_STATE,
	kCAM_ALREADY_POWER_STATE_SET,
	kCAM_INVALID_TIMEOUT,
	kCAM_INVALID_LIGHT_PATH_SHUTTER_STATE,
// Errors relate to auto exposure.(24-32) 
	kCAM_AE_INVALID_ADJUSTMENT_PARAM,
	kCAM_AE_INVALID_EVAL_FUNC,
	kCAM_AE_INVALID_REGION,
	kCAM_AE_INVALID_MODE,
	kCAM_AE_INVALID_LOCK_STATE,
	kCAM_AE_INVALID_TARGET_VALUE,
	kCAM_AE_ALREADY_LOCK_STATE_SET,
	kCAM_AE_NO_EVAL_FUNC,
	kCAM_AE_INVALID_WB_COLOR_TEMPERATURE,
// Errors relate to exposure.(33-44) 
	kCAM_EXP_AE_NORMAL_ONETIME_TIMEOUT,
	kCAM_EXP_AE_SFL_ONETIME_TIMEOUT,
	kCAM_EXP_INVALID_MODE,
	kCAM_EXP_INVALID_SHUTTER_SPEED,
	kCAM_EXP_INVALID_ISO,
	kCAM_EXP_INVALID_ISO_GAIN,
	kCAM_EXP_INVALID_GAINED_EXPOSURE_MODE,	// *** DP30
	kCAM_EXP_INVALID_CCD_SENSITIVITY_MODE,	// *** DP30
	kCAM_EXP_ALREADY_MODE_SET,
	kCAM_EXP_INVALID_APPROPRIATEEXPCOUNT,
	kCAM_EXP_INVALID_ONETIME_TIMEOUT,
	kCAM_EXP_INVALID_REAL_EXPOSURE_LIMIT,
// Errors relate to focus.(45-46) 
	kCAM_FCS_INVALID_FOCUSMODE,
	kCAM_FCS_INVALID_REGION,
// Errors relate to white balance.(47-52) 
	kCAM_WB_CALIBRATE_ERROR,
	kCAM_WB_CALIBRATE_TIMEOUT,		//<<ADD 08/24/2002 Kotaro
	kCAM_WB_INVALID_MODE,
	kCAM_WB_INVALID_REGION,
	kCAM_WB_INVALID_GAIN,
	kCAM_WB_CANNOT_SET_SPECIFIED_WB,
// Errors relate to black balance.(53-57) 
	kCAM_BB_CALIBRATE_ERROR,
	kCAM_BB_CALIBRATE_TIMEOUT,
	kCAM_BB_INVALID_MODE,
	kCAM_BB_INVALID_REGION,
	kCAM_BB_INVALID_OFFSET,
// Errors relate to image processing.(58-65) 
	kCAM_IP_INVALID_ORIENTATION,
	kCAM_IP_INVALID_SHARPNESS,
	kCAM_IP_INVALID_COLOR_MODE,
	kCAM_IP_INVALID_LEVEL_ADJUST,
	kCAM_IP_INVALID_LUT,
	kCAM_IP_INVALID_NOISE_REDUCTION,		// *** DP30
	kCAM_IP_INVALID_DARK_IMAGE_TIMES,		// *** DP30
	kCAM_IP_INVALID_TRANSFER_MODE,			// DP21 
// Errors releate to live image.(66-75) 
	kCAM_LV_INVALID_IMAGE_SIZE,
	kCAM_LV_INVALID_BINNING_MODE,
	kCAM_LV_CANNOT_SET_SPECIFIED_BINNING_MODE,
	kCAM_LV_INVALID_ZOOM,
	kCAM_LV_INVALID_ZOOM_REGION,
	kCAM_LV_CANNOT_SET_SPECIFIED_ZOOM,
	kCAM_LV_INVALID_CCD_IMAGE_TYPE,
	kCAM_LV_MOVIE_ERROR,
	kCAM_LV_MOVIE_TIMEOUT,
	kCAM_LV_INVALID_BIT_A_PIXEL,		// *** Add
// Errors relate to record image(76-86) 
	kCAM_REC_START_ERROR,
	kCAM_REC_STOP_ERROR,
	kCAM_REC_LACK_OF_MEMORY,
	kCAM_REC_INVALID_FILENAME,			// *** Add
	kCAM_REC_INVALID_TRIMMINGREGION,	// *** Add
	kCAM_REC_INVALID_FORMAT,			// *** Add
	kCAM_REC_INVALID_FRAMETIME,			// *** Add
	kCAM_REC_INVALID_IMAGE_SIZE,		// DP21
	kCAM_REC_INVALID_BINNING_MODE,		// DP21
	kCAM_REC_INVALID_TIME,				// DP21
	kCAM_REC_INVALID_MODE,				// DP21
// Errors releate to stil-image.(87-103) 
	kCAM_SIA_INVALID_PRECAPTUE_MODE,
	kCAM_SIA_INVALID_ACCUMULATE_MODE,
	kCAM_SIA_INVALID_ACCUMULATE_TIMES,
	kCAM_SIA_INVALID_BYTES_A_CHANNEL,
	kCAM_SIA_INVALID_SHIFT_BITS_FOR_16,
	kCAM_SIA_INVALID_IMAGE_SIZE,
	kCAM_SIA_CANNOT_SET_SPECIFIED_IMAGE_SIZE,	//<<ADD,01/31/2003,KOTARO
	kCAM_SIA_INVALID_BINNING_MODE,				//<<ADD,01/31/2003,KOTARO
	kCAM_SIA_CANNOT_SET_SPECIFIED_BINNING_MODE,	//<<ADD,01/31/2003,KOTARO
	kCAM_SIA_INVALID_TRIMMING_REGION,
	kCAM_SIA_CANNOT_CAPTURE,
	kCAM_SIA_CANNOT_STOP,
	kCAM_SIA_CANNOT_GET_PROGRESS,
	kCAM_SIA_INVALID_CCD_IMAGE_TYPE,
	kCAM_SIA_CAPTURE_ERROR,
	kCAM_SIA_CAPTURE_TIMEOUT,
	kCAM_SIA_INVALID_NOISE_REDUCTION_MODE,	// *** DP30
// Errors relate to comminucation(104-111) 
	kCAM_COM_INVALID_COMMAND,
	kCAM_COM_INVALID_INTERRUPT,
	kCAM_COM_INVALID_PARAMETER,
	kCAM_COM_PARAM_OUT_OF_RANGE,
	kCAM_COM_INVALID_MEMORY_ADDRESS,
	kCAM_COM_TIMEOUT,
	kCAM_IFCARD_COMMINUCATION_ERROR,
	kCAM_COM_BUFFER_FULL,
// Errors relate to the camera(112-124) 
	kCAM_CAMERA_ERROR,
	kCAM_CAMERA_NOHEAD,
	kCAM_CAMERA_WRONG_HEAD,
	kCAM_CCD_HOT_WARNING,
	kCAM_CCD_COOL_WARNING,
	kCAM_CCD_COOL_CAUTION,
	kCAM_HOT_WARNING,
	kCAM_COOL_WARNING,
	kCAM_CAMERA_DEVICE_ERROR,
	kCAM_CAMERA_POWER_ERROR,
	KCAM_CAMERA_NO_CAMPS,
	kCAM_LIGHTPATH_SHUTTER_DEVICE_ERROR,
	kCAM_CAMERA_CASE_HOT_WARNING,
// Errors releate to PCI board(125-131) 
	kCAM_IFCARD_ERROR,
	kCAM_IFCARD_DEVICE_ERROR,
	kCAM_IFCARD_CONFIGURATION_ERROR,
	kCAM_IFCARD_UNDEFINED_PARAM_ERROR,
	kCAM_IFCARD_CONFIGURATION_NOT_COMPLETED,
	kCAM_CAMARA_FROM1_VERITY_ERROR,	// *** DP30
	kCAM_CAMARA_FROM2_VERITY_ERROR,	// *** DP30
// Errors relate to estimation tools(132-141) 
	kCAM_EST_CANNOT_GET_DEVICE_VERSION,
	kCAM_EST_CANNOT_SET_DEVICE_SERIAL_NUMBER,
	kCAM_EST_CANNOT_GET_DEVICE_SERIAL_NUMBER,
	kCAM_EST_CANNOT_SET_DEVICE_DEBUG_REG,
	kCAM_EST_CANNOT_GET_DEVICE_DEBUG_REG,
	kCAM_EST_INVALID_DEVICE_ID,
	kCAM_EST_ERROR_DATAWRITE,
	kCAM_EST_INVALID_SHARPNESS_EFFECT,
	kCAM_EST_INVALID_TEMPERATURE_TYPE,
	kCAM_INVALID_CCD_TARGET_TEMPERATURE,
// New Add DP71(142-155) 
	kCAM_INVALID_OPEN_DELAY,
	kCAM_IP_INVALID_CUSTOM_BW_COEFFICIENT,
	kCAM_CAMERA_HEAD_POWER_ERROR,
	kCAM_CAMERA_PELTIER_POWER_ERROR,
	kCAM_SIA_INVALID_COLOR_MODE,
	kCAM_LV_INVALID_BYTES_A_CHANNEL,
	kCAM_LV_INVALID_SHIFT_BITS_FOR_16,
	kCAM_LV_INVALID_COLOR_MODE_AND_BYTES_A_CHANNEL,
	kCAM_CAMERA_ROM_ERASE_ERROR,
	kCAM_CAMERA_ROM_WRITE_ERROR,
	kCAM_CAMERA_FW_ERROR,
	kCAM_EST_INVALID_UPDATE_DATA,
	kCAM_CAMERA_OS_REBOOT,
	kCAM_UPDATE_ERROR,
// New Add DP72(156-162) 
	kCAM_LNK_COMMUNICATION_ERROR,
	kCAM_LNK_SEND_TIMEOUT,
	kCAM_IP_INVALID_COLOR_SPACE_MODE,
	kCAM_LNK_INVALID_SEND_SIZE,
	kCAM_LNK_INVALID_BAUDRATE,
	kCAM_LNK_NO_DEVICE,
	kCAM_LNK_UART_ERROR,
// New Add DP73(163-187) 
	kCAM_EXP_INVALID_ROTATION_COUNT,
	kCAM_EXP_AE_SFL2_ONETIME_TIMEOUT,
	kCAM_IP_INVALID_BLEACH_CORRECTION_MODE,
	kCAM_IP_INVALID_ANTI_HALATION_MODE,
	kCAM_IP_INVALID_ANTI_HALATION_SATURATION,
	kCAM_IP_INVALID_ANTI_HALATION_STRENGTH,
	kCAM_IP_INVALID_ANTI_HALATION_ASYMMETRY,
	kCAM_IP_INVALID_8COLOR_ADJUSTMENT_MODE,
	kCAM_LV_INVALID_ROI_RECT,
	kCAM_SIA_INVALID_ROI_RECT,
	kCAM_SIA_CANNOT_RANDOM_TRIGGER,
	kCAM_SIA_RAW_DEVELOP_ERROR,
	kCAM_IFCARD_UNCONNETED_EDIP,
	kCAM_IFCARD_UNKNOWN_EDIP,
	kCAM_CANNOT_HEAD_AND_FOOT_INFO,
	kCAM_LNK_NOT_ENOUGH_RESOURCES,
	kCAM_LNK_SENDQUE_OVERFLOW,
	kCAM_LNK_SEND_REQUEST_DELETED,
	kCAM_FAILED_ATTACH_WORK_BUFFER,
	kCAM_FAILED_DETACH_WORK_BUFFER,
	kCAM_LNK_SEND_VERIFY_ERROR,
	kCAM_LNK_RECEIVE_VERIFY_ERROR,
	kCAM_UNKNOWN_CAMERA_DEVICE_ERROR,
	kCAM_UNKNOWN_IMAGE_PROC_ERROR,
	kCAM_OUT_OF_MEMORY,
// New Add DP80(188- 
	kCAM_SIA_CANNOT_TRIMMING_DIFF_CENTERING_MODE,
	kCAM_SIA_TRIGGER_MODE_EXP_SHUTTER_SPEED_TOO_SHORT,
// New Add DP22/DP27(190- 
	kCAM_IP_INVALID_CONTRAST_MODE,
	kCAM_WB_CANNOT_SET_GAIN_IN_CURRENT_MODE,
	kCAM_ROI_INVALID_PARAMETER,
	kCAM_ROI_INVALID_IMAGER_SIZE,
	kCAM_ROI_INVALID_FRAME_SIZE,
	kCAM_ROI_INVALID_IMAGE_SIZE,
	kCAM_ROI_INVALID_FRAME_OFFSET,
	kCAM_ROI_INVALID_BINNING_MODE,
	kCAM_ROI_INVALID_ORIENTATION,
	kCAM_ROI_INVALID_RECTANGLE,
	kCAM_ROI_INVALID_AE_REGION,
	kCAM_ROI_INVALID_WB_REGION,
	kCAM_ROI_INVALID_FOCUS_REGION,
	kCAM_ROI_INVALID_DRAFT_MODE,
	kCAM_EST_BLACK_DIFF_NOT_DARK,
	kCAM_EST_LEVEL_DIFF_TOO_DARK,
	kCAM_EST_LEVEL_DIFF_TOO_BRIGHT,
	kCAM_EST_LEVEL_DIFF_TIMEOUT,
	kCAM_EST_LEVEL_DIFF_FAILED,
// New Add DP74(209-	ADD 2015/12/07
	kCAM_IP_HDR_INVALID_PARAMETER,
	kCAM_IP_HDR_INVALID_CUDA_VER,
	kCAM_HDR_CUDA_DEVICES_NOFIND,
	kCAM_HDR_CUDA_INVALID_PARAMETER,
	kCAM_HDR_CUDA_RUNTIME_ERROR,		// cudaError_t + offset(1,000,000)
	kCAM_HDR_INIT_ERROR,
	kCAM_HDR_INIT_ALREADY,
	kCAM_HDR_RUNTIME_NOT_IMPLEMENT,		// Run time archtecture is not implemented
	kCAM_HDR_RUNTIME_NOT_INITIALIZED,	// Run time archtecture is not inithalized
	kCAM_HDR_RUNTIME_NOT_SETPARAM,
	kCAM_HDR_RUNTIME_NOT_MAPPED,
	kCAM_HDR_RUNTIME_MAPPED_ALREADY,
	kCAM_HDR_RUNTIME_PARAMETER_ERROR,	// Runtime Parameter Error
	kCAM_HDR_RUNTIME_ENGEN_ERROR,		// cudaError_t + offset(1,000,000)
	kCAM_HDR_HDRTUN_INVALID_PARAMETER,	// HDR Tuning parameter error
	kCAM_PDIP_TEMPERATURE_WARNING,		// FPGA(PDIP) temperature anomaly 
	kCAM_EDIP_TEMPERATURE_WARNING,		// FPGA(EDIP) temperature anomaly 

// Detail error begin at 1000
// No detail error.
	kCAM_NO_DETAIL_ERROR = CAM_ERR_DETAIL,
// Detail errors relate to library initialization.
	kCAM_API_CANNOT_CREATE_CAMERA,
	kCAM_API_CANNOT_CREATE_CAMERA_BOARD,
	kCAM_API_CANNOT_INITIALIZE_CAMERA_BOARD,
	kCAM_API_CANNOT_CREATE_CAMERA_PARTS,
	kCAM_API_CANNOT_ALLOCATE_LUT,
	kCAM_API_CANNOT_ALLOCATE_DMA_TRANS_BUFFER,
	kCAM_API_CANNOT_LOCK_DMA_TRANS_BUFFER,
// Detail errors relate to the recoder.
	kCAM_API_CANNOT_ALLOCATE_CACHE,
// Detail errors relate to the camera.
	kCAM_CAMERA_DEVICE_AFE_ERROR,
	kCAM_CAMERA_DEVICE_TG_ERROR,
	kCAM_CAMERA_DEVICE_EEPROM_ERROR,
	kCAM_CAMERA_DEVICE_ADC_ERROR,
	kCAM_CAMERA_DEVICE_DAC_ERROR,
	kCAM_CAMERA_DEVICE_OTHER_ERROR,
// Detail errors relate to the PCI board.
	kCAM_IFCARD_DEVICE_EEPROM_ERROR,
	kCAM_IFCARD_DEVICE_FLASH_ROM_ERROR,
	kCAM_IFCARD_DEVICE_SDRAM_ERROR,
	kCAM_IFCARD_DEVICE_FIFO_ERROR,
	kCAM_IFCARD_DEVICE_BANK_MEMORY_ERROR,
	kCAM_IFCARD_DEVICE_SDRAMC_ERROR,
	kCAM_IFCARD_DEVICE_DIP1_ERROR,
	kCAM_IFCARD_DEVICE_DIP2_ERROR,
	kCAM_IFCARD_DEVICE_OTHER_ERROR,
// Detail errors relate to PCI configuration
	kCAM_IFCARD_CONFIG_SDRAMC_ERROR,
	kCAM_IFCARD_CONFIG_DIP1_ERROR,
	kCAM_IFCARD_CONFIG_DIP2_ERROR,
	kCAM_IFCARD_CONFIG_OTHER_ERROR,
	kCAM_IFCARD_DEVICE_CAMERA_ERROR,	// *** DP30
// For DP73
	kCAM_IFCARD_CONFIG_EDIP_ERROR,
	kCAM_CAMERA_DEVICE_CONFIG_TGM_ERROR,
	kCAM_CAMERA_DEVICE_UPDATE_MTR_ERROR,
	kCAM_CAMERA_DEVICE_MTR_CPU_ERROR,
	kCAM_CAMERA_DEVICE_MTR_CTL_ERROR,
	kCAM_CAMERA_CABLE_SNAP_ERROR,

	// Warning begin at 10000
	kCAM_CANNOT_READ_DEFAULT_LUT = CAM_ERR_WARNING,
	kCAM_INVALID_DEFAULT_LUT,
	kCAM_LV_MISSED_FRAME,
	kCAM_LV_INVALID_FRAME,

	NUMBER_OF_CAM_ERROR
}CAM_ERROR,*PCAM_ERROR;
#define MIN_NORMAL_ERROR	kCAM_NO_ERROR
#define MAX_NORMAL_ERROR	kCAM_EDIP_TEMPERATURE_WARNING
#define MIN_DETAIL_ERROR	kCAM_NO_DETAIL_ERROR
#define MAX_DETAIL_ERROR	kCAM_CAMERA_CABLE_SNAP_ERROR
#define MIN_WARNING			kCAM_CANNOT_READ_DEFAULT_LUT
#define MAX_WARNING			kCAM_LV_INVALID_FRAME

////////////////////////////////////////////////////////////////////////////////
//Structure Definition
////////////////////////////////////////////////////////////////////////////////

typedef struct tagCAM_AREA_AVE_EX
{
	DWORD dwAveValR;	// R - Average
	DWORD dwAveValG;	// G - Average
	DWORD dwAveValB;	// B - Average
} CAM_AREA_AVE_EX, *PCAM_AREA_AVE_EX;

typedef struct tagCAM_IP_LEVEL_ADJUST_EX
{
	CAM_IP_COLOR_CHANNEL nChannel;
	long lInShadow;
	long lInHighlight;
	double dInGamma;
	long lOutShadow;
	long lOutHighlight;
} CAM_IP_LEVEL_ADJUST_EX, *PCAM_IP_LEVEL_ADJUST_EX;

typedef struct tagCAM_RECTANGLE
{
	DWORD dwLeft;
	DWORD dwTop;
	DWORD dwRight;
	DWORD dwBottom;
} CAM_RECTANGLE,*PCAM_RECTANGLE; 

typedef struct tagCAM_RECTANGLE_EX
{
	long lLeft;
	long lTop;
	long lRight;
	long lBottom;
} CAM_RECTANGLE_EX, *PCAM_RECTANGLE_EX;

typedef struct tagCAM_RATIONAL
{
	DWORD dwNumerator;		//Numerator
	DWORD dwDenominator;	//Denominator
} CAM_RATIONAL,*PCAM_RATIONAL;

typedef struct tagCAM_EST_DECIMAL
{
    long lSign;				// Positive:0, Negative:1
    long lInteger;			// Integer number 2bits 0, 1, 2, 3
    long lDecimal;			// Decimal number 7bits 0 - 127
}CAM_EST_DECIMAL;

// Disk size
typedef struct tagCAM_DISK_SIZE_EX
{
	DWORD dwLowPart;
	DWORD dwHighPart;
}CAM_DISK_SIZE_EX, *PCAM_DISK_SIZE_EX;

// Image data
typedef struct tagCAM_IMAGE_EX
{
	unsigned char *pImage;
	long lWidth;
	long lHeight;
	long lNumberOfChannel;
	long lBytesPerChannel;
	long lEffectiveBits;
}CAM_IMAGE_EX, *PCAM_IMAGE_EX;


//class CCameraCore;
//typedef CCameraCore CAM_OBJECT;
typedef void CAM_OBJECT;
// Callback Function
typedef	void (WINAPI *PFCAM_CALLBACK)(CAM_OBJECT *pCameraObject, CAM_CALLBACK_ID kId, WPARAM wParam, LPARAM lParam, CAM_ERROR kError, void *pUser);
// AE Callback Function
typedef BOOL (*PFCAM_AE_EVALUATE_CALLBACK) (CAM_OBJECT *pCameraObject,
											const BYTE *pbyImageBuffer,
											int nWidth,
											int nHeight,
											int nChannels,
											CAM_RECTANGLE_EX *pRect,
											DWORD dwTargetVal,
											CAM_RATIONAL *pCurrentShutterSpeed,
											CAM_RATIONAL *pNextShutterSpeed,
											CAM_AE_STATUS *pAEStatus,
											CAM_ERROR *pkError,
											void *pUser);


// Update Target
typedef enum tagCAM_EST_UPDATE_TARGET
{
	kCAM_EST_UPDATE_FW,
	kCAM_EST_UPDATE_FPGA1,
	kCAM_EST_UPDATE_FPGA2,
	kCAM_EST_UPDATE_BOOT,
	kCAM_EST_UPDATE_EDIP1,
	kCAM_EST_UPDATE_EDIP2,
	kCAM_EST_UPDATE_MTRCPU,
	kCAM_EST_UPDATE_TGM3_1,
	kCAM_EST_UPDATE_TGM3_2,
	kCAM_EST_UPDATE_TGM4_1,
	kCAM_EST_UPDATE_TGM4_2,
	NUMBER_OF_UPDATE_TARGET
} CAM_EST_UPDATE_TARGET,*PCAM_EST_UPDATE_TARGET;
#define MIN_UPDATE_TARGET	kCAM_EST_UPDATE_FW
#define MAX_UPDATE_TARGET	kCAM_EST_UPDATE_TGM4_2
#define NUM_UPDATE_TARGET	NUMBER_OF_UPDATE_TARGET

typedef struct tagCAM_EST_UPDATE_DATA
{
	DWORD dwKeyCode;
	CAM_EST_UPDATE_TARGET kTarget;
	DWORD dwSize;
	BYTE *pbyData;
} CAM_EST_UPDATE_DATA;

// Behavior Mode
typedef enum tagCAM_EST_BEHAVIOR_MODE
{
	kCAM_EST_BEHAVIOR_NORMAL,
	kCAM_EST_BEHAVIOR_UPDATE_CHECKSUM_ERROR_AND_OK,
	kCAM_EST_BEHAVIOR_UPDATE_CHECKSUM_ERROR_AND_NG,
	kCAM_EST_BEHAVIOR_UPDATE_WRITE_ERROR_AND_OK,
	kCAM_EST_BEHAVIOR_UPDATE_WRITE_ERROR_AND_NG,
	kCAM_EST_BEHAVIOR_DPLINK_ERROR_OVERRUN,
	kCAM_EST_BEHAVIOR_DPLINK_ERROR_FRAMING,
	kCAM_EST_BEHAVIOR_DPLINK_ERROR_PARITY,
	kCAM_EST_BEHAVIOR_DPLINK_ERROR_DISCONNECT,
	kCAM_EST_BEHAVIOR_DPLINK_ECHOBACK,
	kCAM_EST_BEHAVIOR_SEND_TIMEOUT,
	NUMBER_OF_BEHAVIOR_MODE
} CAM_EST_BEHAVIOR_MODE,*PCAM_EST_BEHAVIOR_MODE;
#define MIN_BEHAVIOR_MODE	kCAM_EST_BEHAVIOR_NORMAL
#define MAX_BEHAVIOR_MODE	kCAM_EST_BEHAVIOR_SEND_TIMEOUT
#define NUM_BEHAVIOR_MODE	NUMBER_OF_BEHAVIOR_MODE

// Virtual Camera Level
typedef enum tagCAM_VIRTUAL_LEVEL
{
	kCAM_VIRTUAL_REAL,
	kCAM_VIRTUAL_REAL_DELAY,
	kCAM_VIRTUAL_EMULATOR,
	kCAM_VIRTUAL_SIMULATOR,
	kCAM_VIRTUAL_DUMMY,
	kCAM_VIRTUAL_MOCK,
	NUMBER_OF_VIRTUAL_LEVEL
} CAM_VIRTUAL_LEVEL, *PCAM_VIRTUAL_LEVEL;
#define MIN_VIRTUAL_LEVEL	kCAM_VIRTUAL_REAL
#define MAX_VIRTUAL_LEVEL	kCAM_VIRTUAL_MOCK
#define NUM_VIRTUAL_LEVEL	NUMBER_OF_VIRTUAL_LEVEL
#define DFL_VIRTUAL_LEVEL	kCAM_VIRTUAL_REAL

/////////////////////////////////////////////////////////////////
// DP74 2015/10/21 S.Ogiwara

// for HDR

// HDR Processing mode
typedef enum tagCAM_IP_HDR_PROCESSING_MODE
{
	kCAM_IP_HDR_PROCESSING_OFF,
	kCAM_IP_HDR_PROCESSING_ON_GPU,
	kCAM_IP_HDR_PROCESSING_ON_CPU,
	NUMBER_OF_IP_HDR_PROCESSING_MODE
} CAM_IP_HDR_PROCESSING_MODE, *PCAM_IP_HDR_PROCESSING_MODE;
#define MIN_IP_HDR_PROCESSING_MODE	kCAM_IP_HDR_PROCESSING_OFF
#define MAX_IP_HDR_PROCESSING_MODE	kCAM_IP_HDR_PROCESSING_ON_CPU
#define NUM_HDR_PROCESSING_MODE	NUMBER_OF_IP_HDR_PROCESSING_MODE

// HDR Image output mode
typedef enum tagCAM_IP_HDR_IMAGEOUTPUT_MODE
{
	kCAM_IP_HDR_IMAGEOUTPUT_HDR,
	kCAM_IP_HDR_IMAGEOUTPUT_REALHDR,
	kCAM_IP_HDR_IMAGEOUTPUT_HDR_AND_REALHDR,
	NUMBER_OF_IP_HDR_IMAGEOUTPUT_MODE
} CAM_IP_HDR_IMAGEOUTPUT_MODE, *PCAM_IP_HDR_IMAGEOUTPUT_MODE;
#define MIN_IP_HDR_IMAGEOUTPUT_MODE	kCAM_IP_HDR_IMAGEOUTPUT_HDR
#define MAX_IP_HDR_IMAGEOUTPUT_MODE	kCAM_IP_HDR_IMAGEOUTPUT_HDR_AND_REALHDR
#define NUM_HDR_IMAGEOUTPUT_MODE	NUMBER_OF_IP_HDR_IMAGEOUTPUT_MODE

// HDR Exposure mode
typedef enum tagCAM_IP_HDR_EXPOSURE_MODE
{
	kCAM_IP_HDR_EXPOSURE_BRACKETING,
	kCAM_IP_HDR_EXPOSURE_RANGE,
	NUMBER_OF_IP_HDR_EXPOSURE_MODE
} CAM_IP_HDR_EXPOSURE_MODE, *PCAM_IP_HDR_EXPOSURE_MODE;
#define MIN_IP_HDR_EXPOSURE_MODE	kCAM_IP_HDR_EXPOSURE_BRACKETING
#define MAX_IP_HDR_EXPOSURE_MODE	kCAM_IP_HDR_EXPOSURE_RANGE
#define NUM_HDR_EXPOSURE_MODE	NUMBER_OF_IP_HDR_IMAGEOUTPUT_MODE


// HDR texture mode
typedef enum tagCAM_IP_HDR_TEXTURE_MODE
{
	kCAM_IP_HDR_TEXTURE_NORMAL,
	kCAM_IP_HDR_TEXTURE_HARD,
	NUMBER_OF_IP_HDR_TEXTURE_MODE
} CAM_IP_HDR_TEXTURE_MODE, *PCAM_IP_HDR_TEXTURE_MODE;
#define MIN_IP_HDR_TEXTURE_MODE	kCAM_IP_HDR_TEXTURE_NORMAL
#define MAX_IP_HDR_TEXTURE_MODE	kCAM_IP_HDR_TEXTURE_HARD
#define NUM_HDR_TEXTURE_MODE	NUMBER_OF_IP_HDR_TEXTURE_MODE

// HDR Tuning mode
typedef enum tagCAM_IP_HDR_TUNING_MODE
{
	kCAM_IP_HDR_TUNING_ONETIME_AUTO,
	kCAM_IP_HDR_TUNING_FIX_COEFFICIENTS,
	kCAM_IP_HDR_TUNING_BTCS,
	kCAM_IP_HDR_TUNING_TGOS,
	kCAM_IP_HDR_TUNING_DSX,
	kCAM_IP_HDR_TUNING_TEST,
	NUMBER_OF_IP_HDR_TUNING_MODE
} CAM_IP_HDR_TUNING_MODE, *PCAM_IP_HDR_TUNING_MODE;
#define MIN_IP_HDR_TUNING_MODE	kCAM_IP_HDR_TUNING_ONETIME_AUTO
#define MAX_IP_HDR_TUNING_MODE	kCAM_IP_HDR_TUNING_TEST
#define NUM_HDR_TUNING_MODE	NUMBER_OF_IP_HDR_TUNING_MODE

// HDR Starting parameter
typedef struct tagCAM_IP_HDR_START_PARAM
{
	CAM_IP_HDR_PROCESSING_MODE	kProcessingMode;		// Processing mode
	int							nDeviceId;				// Device ID
	CAM_IP_HDR_IMAGEOUTPUT_MODE	kImageOutputMode;		// Image output mode
	void						*pImageRealHDR;			// Pointer for RealHDR image buffer
	int							nBitsRealHDR;			// Bits of RealHDR image(Read only)
	CAM_IP_HDR_EXPOSURE_MODE	kExposureMode;			// Exposure mode
	int							nMergeNum;				// Merge number
	double						dBracketingRatio;		// Bracketing Ratio
	double						dBracketingCoeffient;	// Bracketing Coeffient
	CAM_RATIONAL				pstExposureShortest;	// Shortest exposure time
	CAM_RATIONAL				pstExposureLongest;		// Longest exposure time
	CAM_IP_HDR_TEXTURE_MODE		kHdrTextureMode;		// HDR texture mode
	CAM_IP_HDR_TUNING_MODE		kTuningMode;			// Tuning mode
	double						dDistPercent;			// Distance of BF percent
	double						dDiffLevel;				// Level of BF difference
}CAM_IP_HDR_START_PARAM;

// HDR Update parameter
typedef struct tagCAM_IP_HDR_UPDATE_PARAM
{
	int		nBrightness;		// Brightness coefficient
	int		nTexture;			// Texture coefficient
	int		nContrast;			// Contrast coefficient
	int		nSaturation;		// Saturation coefficient
	double	dGain;				// Gain of base
	int		nOffset;			// Offset of base
	double	dBaseMean;			// Mean of base
	int		nUpperLimit;		// Upper limit : nUpperLimit > nLowerLimit
	int		nLowerLimit;		// Lower limit : nUpperLimit > nLowerLimit
	int		nUpperMargin;		// Upper Magin
	BOOL	bFixManualSettings;	// Fix manual settings
								//  Value
								//   TRUE:Use Brightness/Texture/Contrast/Saturation coefficients set in HDR update parameter
								//   FALSE:Use Brightness/Texture/Contrast/Saturation coefficients calculated in automatic HDR tuning
}CAM_IP_HDR_UPDATE_PARAM;

// Image Information

// ÉâÉCÉuópâÊëúèÓïÒ
typedef struct {
	DWORD					dwWidth;				// [SZW]
	DWORD					dwHeight;				// [SZH]
	CAM_LV_BINNING_MODE		kBinningMode;			// [BINMD]
	CAM_IP_COLOR_MODE		kColorMode;				// [COL]
	CAM_IP_ORIENTATION		kOrientation;			// [DIR]
	long					lBytes;					// [BIT] 
	CAM_RATIONAL			stShutterSpeed;			// [MEEXP]
	DWORD					dwAERVal;				// [AE R]
	DWORD					dwAEGVal;				// [AE G]
	DWORD					dwAEBVal;				// [AE B]
	CAM_RECTANGLE_EX		stAERect;
	DWORD					dwWBRVal;				// [WB R]
	DWORD					dwWBGVal;				// [WB G]
	DWORD					dwWBBVal;				// [WB B]	
	CAM_RECTANGLE_EX		stWBRect;
	DWORD					dwFocusVal;				// [FCS]
	CAM_RECTANGLE_EX		stFocusRect;
	DWORD					dwFrameCount;			// [FRMCNT]
	CAM_IP_COLOR_SPACE_MODE	kColorSpace;			// [CS]
	DWORD					dwRotateNo;				// HDR Frame Count 
	DWORD					dwRKGateCounter;		// Roko Gate Counter 
	DWORD					dwHistogram[256];		// HistogramElement 
	// New Add DP80 
	DWORD					dwBBRVal;				// [BB R] 
	DWORD					dwBBGVal;				// [BB G] 
	DWORD					dwBBBVal;				// [BB B] 
	CAM_RECTANGLE_EX		stBBRect;
	DWORD64					dwAESumR;				// [AE SUMR] 
	DWORD64					dwAESumGR;				// [AE SUMGR] 
	DWORD64					dwAESumGB;				// [AE SUMGB] 
	DWORD64					dwAESumB;				// [AE SUMB] 
	DWORD64					dwWBSumR;				// [WB SUMR] 
	DWORD64					dwWBSumGR;				// [WB SUMGR] 
	DWORD64					dwWBSumGB;				// [WB SUMGB] 
	DWORD64					dwWBSumB;				// [WB SUMB] 
	DWORD64					dwBBSumR;				// [BB SUMR] 
	DWORD64					dwBBSumGR;				// [BB SUMGR] 
	DWORD64					dwBBSumGB;				// [BB SUMGB] 
	DWORD64					dwBBSumB;				// [BB SUMB] 
	void*					pHeader;
	CAM_IP_HDR_START_PARAM		stHDRStartParam;		// [HDR Start Parameters]
	CAM_IP_HDR_UPDATE_PARAM		stHDRUpdAteParam;		// [HDR Update Parameters]
} CAM_LV_IMAGE_INFO, *PCAM_LV_IMAGE_INFO; 

// ò^âÊópâÊëúèÓïÒ
typedef struct {
	DWORD					dwWidth;				// [SZW]
	DWORD					dwHeight;				// [SZH]
	CAM_REC_BINNING_MODE	kBinningMode;			// [BINMD]
	CAM_IP_COLOR_MODE		kColorMode;				// [COL]
	CAM_IP_ORIENTATION		kOrientation;			// [DIR]
	long					lBytes;					// [BIT] 
	CAM_RATIONAL			stShutterSpeed;			// [MEEXP]
	DWORD					dwAERVal;				// [AE R]
	DWORD					dwAEGVal;				// [AE G]
	DWORD					dwAEBVal;				// [AE B]
	CAM_RECTANGLE_EX		stAERect;
	DWORD					dwWBRVal;				// [WB R]
	DWORD					dwWBGVal;				// [WB G]
	DWORD					dwWBBVal;				// [WB B]
	CAM_RECTANGLE_EX		stWBRect;
	DWORD					dwFocusVal;				// [FCS]
	CAM_RECTANGLE_EX		stFocusRect;
	DWORD					dwFrameCount;			// [FRMCNT]
	CAM_IP_COLOR_SPACE_MODE	kColorSpace;			// [CS]
	DWORD					dwRotateNo;				// HDR Frame Count 
} CAM_REC_IMAGE_INFO, *PCAM_REC_IMAGE_INFO; 

// ê√é~âÊópâÊëúèÓïÒ
typedef struct {
	DWORD					dwWidth;				// [SZW]
	DWORD					dwHeight;				// [SZH]
	CAM_SIA_BINNING_MODE	kBinningMode;			// [BINMD]
	CAM_IP_COLOR_MODE		kColorMode;				// [COL]
	CAM_IP_ORIENTATION		kOrientation;			// [DIR]
	long					lBytes;					// [BIT] 
	CAM_RATIONAL			stShutterSpeed;			// [MEEXP]
	CAM_IP_COLOR_SPACE_MODE	kColorSpace;			// [CS]
	DWORD					dwOpenDelayCount;		// OpenDelayCount 
	void*					pHeader;
} CAM_SIA_IMAGE_INFO, 		*PCAM_SIA_IMAGE_INFO; 


// ÉfÉoÉbÉOópâÊëúèÓïÒ
typedef struct {
	BYTE	bHeaderID[4];		// [HEADID 31:0]
	WORD	wHeaderLength;		// [HEADLEN 15:0]
	WORD	wVersion;			// [HEADVERSION 7:0]
	WORD	wWidth;				// [SZW 15:0]
	WORD	wHeight;			// [SZH 15:0]

	BYTE	bLiveFlag;			// [LV 0]
	BYTE	bStillFlag;			// [ST 0]
	BYTE	bBinningMode;		// [BINMD 1:0]
	BYTE	bColorMode;			// [COL 2:0]

	BYTE	bBitCount;			// [BIT 0]
	BYTE	bDirection;			// [DIR 1:0]
	BYTE	bDefect;			// [DEF 0]
	BYTE	bColorSpace;		// [CS 0:0]
	
	WORD	wManualExpTimeNumerator;	// [MEEXP  31:0]
	WORD	wManualExpTimeDenominator;

	BYTE	bFooterID[4];		// [FOOTID 31:0]
	WORD	wFooterLength;		// [FOOTLEN 15:0]
	WORD	wEepBGain5000K;		// [EEP_B_gain_5000K 15:0]
	WORD	wEepRGain5000K;		// [EEP_R_gain_5000K 15:0]
	DWORD	dwExpGain;			// [EXPGAIN 20:0]
	DWORD	dwLExpGain;			// [EXPLGAON 21:0]
	DWORD	dwAESumR;			// [AESUMR  31:0]
	DWORD	dwAESumGR;			// [AESUMGR 31:0]
	DWORD	dwAESumGB;			// [AESUMGB 31:0]
	DWORD	dwAESumB;			// [AESUMB  31:0]
	WORD	wAESumX;			// [AESUMX 11:0]
	WORD	wAESumY;			// [AESUMY 11:0]
	WORD	wAESumW;			// [AESUMW 11:0]
	WORD	wAESumH;			// [AESUMH 11:0]
	DWORD	dwWBSumR;			// [WBSUMR  31:0]
	DWORD	dwWBSumGR;			// [WBSUMGR 31:0]
	DWORD	dwWBSumGB;			// [WBSUMGB 31:0]
	DWORD	dwWBSumB;			// [WBSUMB  31:0]
	WORD	wWBSumX;			// [WBSUMX 11:0]
	WORD	wWBSumY;			// [WBSUMY 11:0]
	WORD	wWBSumW;			// [WBSUMW 11:0]
	WORD	wWBSumH;			// [WBSUMH 11:0]	
	DWORD	dwFocusSum;			// [FCSSUMR  31:0]
	WORD	wFocusSumX;			// [FCSSUMX 11:0]
	WORD	wFocusSumY;			// [FCSSUMY 11:0]
	WORD	wFocusSumW;			// [FCSSUMW 11:0]
	WORD	wFocusSumH;			// [FCSSUMH 11:0]
	DWORD	dwBBSumR;			// [BBSUMR  31:0](RESERVE)
	DWORD	dwBBSumGR;			// [BBSUMGR 31:0](RESERVE)
	DWORD	dwBBSumGB;			// [BBSUMGB 31:0](RESERVE)
	DWORD	dwBBSumB;			// [BBSUMB  31:0](RESERVE)
	WORD	wBBSumX;			// [BBSUMX 11:0](RESERVE)
	WORD	wBBSumY;			// [BBSUMY 11:0](RESERVE)
	WORD	wBBSumW;			// [BBSUMW 11:0](RESERVE)
	WORD	wBBSumH;			// [BBSUMH 11:0](RESERVE)	
	DWORD	dwFrameCount;		// [FRMCNT 18:0]
	BYTE	bTransCountNumerator;		// [TRANSCNT 7:0]
	BYTE	bTransCountDenominator;		// [TRANSCNT 7:0]
	BYTE	bMaskInfo;			// [MCL 0]

	WORD	wDstWidth;			//
	WORD	wDstHeight;			//

	DWORD	dwWB_R;				// WBRAVE
	DWORD	dwWB_GR;			// WBGRAVE
	DWORD	dwWB_GB;			// WBGBAVE
	DWORD	dwWB_B;				// WBBAVE

	DWORD	dwAE_R;				// AERAVE
	DWORD	dwAE_GR;			// AEGRAVE
	DWORD	dwAE_GB;			// AEGBAVE
	DWORD	dwAE_B;				// AEBABE
} CAM_IMAGE_INFO, *PCAM_IMAGE_INFO;

typedef struct {
// ÉwÉbÉ_ìôÇ…ñ≥Ç¢Ç™åvéZÇ…ïKóv	
	WORD	wWidth;				
	WORD	wHeight;			
	BYTE	bColorMode;		
	BYTE	bBitCount;			
	BYTE	bLiveFlag;			

// Header 
	// äÓñ{èÓïÒ 
	BYTE	bHeaderID[4];		///< [HEADID 31:0]
	WORD	wHeaderLength;		///< [HEADLEN 15:0]
	WORD	wVersion;			///< [HEADVERSION 23:16]
	WORD	wEepBGain5000K;		///< [EEP_B_gain_5000K 15:0]
	WORD	wEepRGain5000K;		///< [EEP_R_gain_5000K 31:16]
	WORD	wManualExpTimeNumerator;	///< [MEEXP_NU  15:0]
	WORD	wManualExpTimeDenominator;	///< [MEEXP_DE  31:16]
	DWORD	dwCCDExpTime;		// CCDEXP [31:0]
	BYTE	bExpRotation;		// EXP_ROT [7:0]
	DWORD	dwRKGateCounter;	// RKGCNT [24:0]
	DWORD	lexpgain;			// LEXPGAIN[21:0] 
	BYTE	bReserved[8];

	// FPGAÉåÉWÉXÉ^
	WORD	pre_gaplim;
	BYTE	lpf_ka;
	BYTE	lpf_kb;
	BYTE	lpf_kc;
	BYTE	lpf_kd;
	BYTE	lpf_ke;
	BYTE	lpf_kf;

	WORD	fcslmt;

	BYTE	fcsca1;
	WORD	fcscb1;
	BYTE	fcsca2;
	WORD	fcscb2;
	BYTE	fcssa;
	WORD	fcssb;

	BYTE	ggap_ka;
	BYTE	ggap_kb;
	BYTE	ggap_kc;
	BYTE	ggap_kd;
	BYTE	ggap_ke;
	BYTE	ggap_kf;
	BYTE	ggap_kg;
	BYTE	ggap_kh;
	BYTE	ggap_ki;
	BYTE	ggap_kj;
	BYTE	ggap_kk;

	BYTE	bpf_gaplim;

	BYTE	homo_ka;
	BYTE	homo_kb;
	BYTE	homo_kc;
	BYTE	homo_kd;
	BYTE	homo_ke;
	BYTE	homo_kf;

	WORD	bpf_gnp;

	BYTE	gh_ka;
	BYTE	gh_kb;
	BYTE	gh_kc;
	BYTE	gh_kd;
	BYTE	gh_ke;
	BYTE	gh_kf;

	BYTE	gv_ka;
	BYTE	gv_kb;
	BYTE	gv_kc;
	BYTE	gv_kd;
	BYTE	gv_ke;
	BYTE	gv_kf;
	BYTE	gv_kg;
	BYTE	gv_kh;
	BYTE	gv_ki;

	WORD	ghl_ka;
	WORD	ghl_kb;
	WORD	ghl_kc;
	WORD	ghl_kd;
	WORD	ghl_ke;
	WORD	ghl_kf;
	WORD	ghl_kg;
	WORD	ghl_kh;
	WORD	ghl_ki;
	WORD	ghl_kj;
	WORD	ghl_kk;
	WORD	ghl_kl;
	WORD	ghl_km;

	WORD	gvl_ka;
	WORD	gvl_kb;
	WORD	gvl_kc;
	WORD	gvl_kd;
	WORD	gvl_ke;
	WORD	gvl_kf;
	WORD	gvl_kg;
	WORD	gvl_kh;
	WORD	gvl_ki;
	WORD	gvl_kj;
	WORD	gvl_kk;
	WORD	gvl_kl;
	WORD	gvl_km;
	WORD	gvl_kn;
	WORD	gvl_ko;
	WORD	gvl_kp;

	WORD	h_gain;
	WORD	v_gain;
	WORD	hv_gain;

	BYTE	shift_sig;
	BYTE	bpf_dgain;
	BYTE	rawselmd;

	WORD	bpf_ynp;

	BYTE	yd_ka;
	BYTE	yd_kb;
	BYTE	yd_kc;
	BYTE	yd_kd;
	BYTE	yd_ke;
	BYTE	yd_kf;

	BYTE	ya_ka;
	BYTE	ya_kb;
	BYTE	ya_kc;
	BYTE	ya_kd;
	BYTE	ya_ke;
	BYTE	ya_kf;
	BYTE	ya_kg;
	BYTE	ya_kh;

	WORD	bpf_bnp;

	WORD	bbosr;
	WORD	bbosgr;
	WORD	bbosgb;
	WORD	bbosb;
	WORD	wbgr;
	WORD	wbggr;
	WORD	wbggb;
	WORD	wbgb;

	DWORD	expgain;

	WORD	k11;
	WORD	k12;
	WORD	k13;
	WORD	k14;
	WORD	k21;
	WORD	k22;
	WORD	k23;
	WORD	k24;
	WORD	k31;
	WORD	k32;
	WORD	k33;
	WORD	k34;
	WORD	krsat;
	WORD	krhue;
	WORD	kgsat;
	WORD	kghue;
	WORD	kbsat;
	WORD	kbhue;
	WORD	kyesat;
	WORD	kyehue;
	WORD	kcysat;
	WORD	kcyhue;
	WORD	kmgsat;
	WORD	kmghue;

	BYTE	selsumcol;

	BYTE	lapk;
	BYTE	hpfk1;
	BYTE	hpfk2;
	BYTE	lppmixk;
	BYTE	hpfmixk;

	WORD	ldex;
	WORD	ldey;

	BYTE	aeselsumcol;

	WORD	subob_wb;
	WORD	addob_wb;
	WORD	subob_amp;
	WORD	addob_amp;
	WORD	subob_bb;
	WORD	addob_bb;
	WORD	subob_ae;
	WORD	addob_ae;
	WORD	subob_fcs;
	WORD	subob_pad;
	WORD	addob_pad;
	WORD	subob_cdp;
	WORD	addob_cdp;

	BYTE	luten;

	WORD	corelev;
	WORD	edgeg;
	WORD	lim_pos;
	WORD	lim_neg;
	WORD	supc1;
	WORD	supc3;
	WORD	supg1;
	WORD	supg2;

	BYTE	enhmd;
	BYTE	supmd;
	BYTE	spmc;
	BYTE	stid;

	WORD	fmembvl;
	
	WORD	kyr;
	WORD	kyg;
	WORD	kyb;

	WORD	width_ea;
	WORD	height_ea;

	BYTE	effectivebitperch;

	BYTE	bypass;				// bypass[0:0] 
	BYTE	hue_param[8];		// Hue_param[8][7:0]
	BYTE	sat_param[8];		// Sat_param[8][7:0] 
	WORD	ang_param[8];		// Ang_param[8][8:0] 

	// Footer 
	BYTE	bFooterID[4];		// [FOOTID 31:0] 
	WORD	wFooterLength;		// [FOOTLEN 15:0] 
	DWORD64	dwAESumR;			// [AESUMR  33:0] 
	DWORD64	dwAESumGR;			// [AESUMGR 33:0] 
	DWORD64	dwAESumGB;			// [AESUMGB 33:0] 
	DWORD64	dwAESumB;			// [AESUMB  33:0] 
	WORD	wAESumX;			// [AESUMX 15:0] 
	WORD	wAESumY;			// [AESUMY 15:0] 
	WORD	wAESumW;			// [AESUMW 15:0] 
	WORD	wAESumH;			// [AESUMH 15:0] 
	DWORD64	dwWBSumR;			// [WBSUMR  33:0] 
	DWORD64	dwWBSumGR;			// [WBSUMGR 33:0] 
	DWORD64	dwWBSumGB;			// [WBSUMGB 33:0] 
	DWORD64	dwWBSumB;			// [WBSUMB  33:0] 
	WORD	wWBSumX;			// [WBSUMX 15:0] 
	WORD	wWBSumY;			// [WBSUMY 15:0] 
	WORD	wWBSumW;			// [WBSUMW 15:0] 
	WORD	wWBSumH;			// [WBSUMH 15:0] 	
	DWORD64	dwBBSumR;			// [BBSUMR  33:0] 
	DWORD64	dwBBSumGR;			// [BBSUMGR 33:0] 
	DWORD64	dwBBSumGB;			// [BBSUMGB 33:0] 
	DWORD64	dwBBSumB;			// [BBSUMB  33:0] 
	WORD	wBBSumX;			// [BBSUMX 15:0] 
	WORD	wBBSumY;			// [BBSUMY 15:0] 
	WORD	wBBSumW;			// [BBSUMW 15:0] 
	WORD	wBBSumH;			// [BBSUMH 15:0] 
	DWORD64	dwFocusSum;			// [FCSSUMR  33:0] 
	WORD	wFocusSumX;			// [FCSSUMX 15:0] 
	WORD	wFocusSumY;			// [FCSSUMY 15:0] 
	WORD	wFocusSumW;			// [FCSSUMW 15:0] 
	WORD	wFocusSumH;			// [FCSSUMH 15:0] 

	DWORD	dwFrameCount;		// [FRMCNT 31:0] 
	BYTE	bMaskInfo;

	// AE Average Value 
	DWORD dwAE_R;				// AE_R_AVE 
	DWORD dwAE_GR;				// AE_GR_AVE 
	DWORD dwAE_GB;				// AE_GB_AVE 
	DWORD dwAE_B;				// AE_B_AVE 
	// BB Average Value 
	DWORD dwBB_R;				// BB_R_AVE 
	DWORD dwBB_GR;				// BB_GR_AVE 
	DWORD dwBB_GB;				// BB_GB_AVE 
	DWORD dwBB_B;				// BB_B_AVE 
	// WB Average Value 
	DWORD dwWB_R;				// WB_R_AVE 
	DWORD dwWB_GR;				// WB_GR_AVE 
	DWORD dwWB_GB;				// WB_GB_AVE 
	DWORD dwWB_B;				// WB_B_AVE 
	// Histogram 
	DWORD	dwHistogram[256];

	DWORD dwOpenDelayCount;		// OpenDelayCount 
} CAM_IMAGE_INFO_V2, *PCAM_IMAGE_INFO_V2;


// DPLink Status
typedef enum tagCAM_LNK_STATUS
{
	kCAM_LNK_NOT_READY,
	kCAM_LNK_READY,
	kCAM_LNK_FRAME_SENDING,
	kCAM_LNK_FRAME_RECEIVING,
	kCAM_LNK_ERROR,
	NUMBER_OF_LNK_STATUS
} CAM_LNK_STATUS,*PCAM_LNK_STATUS;
#define MIN_LNK_STATUS	kCAM_LNK_NOT_READY
#define MAX_LNK_STATUS	kCAM_LNK_ERROR
#define NUM_LNK_STATUS	NUMBER_OF_LNK_STATUS

// DPLink Error Status
typedef enum tagCAM_LNK_ERROR_STATUS
{
	kCAM_LNK_NO_ERROR,
	kCAM_LNK_UART_OPEN_ERROR,
	kCAM_LNK_OVERRUN_ERROR,
	kCAM_LNK_FRAMING_ERROR,
	kCAM_LNK_PARITY_ERROR,
	NUMBER_OF_LNK_ERROR_STATUS
} CAM_LNK_ERROR_STATUS,*PCAM_LNK_ERROR_STATUS;
#define MIN_LNK_ERROR_STATUS	kCAM_LNK_NO_ERROR
#define MAX_LNK_ERROR_STATUS	kCAM_LNK_PARITY_ERROR
#define NUM_LNK_ERROR_STATUS	NUMBER_OF_LNK_ERROR_STATUS

// DPLink Frame Mode
typedef enum tagCAM_LNK_FRAME_MODE
{
	kCAM_LNK_BINARY_MODE,
	kCAM_LNK_TEXT_MODE,
	NUMBER_OF_LNK_FRAME_MODE
} CAM_LNK_FRAME_MODE,*PCAM_LNK_FRAME_MODE;

// Transfer Mode
typedef enum tagCAM_IP_TRANSFER_MODE
{
	kCAM_IP_TRANSFER_RGB = 0,
	kCAM_IP_TRANSFER_YUV,
	NUMBER_OF_CAM_IP_TRANSFER_MODE	
} CAM_IP_TRANSFER_MODE, *PCAM_IP_TRANSFER_MODE;

// AE MODE
typedef enum tagCAM_AE_MODE
{
	kCAM_AE_AVERAGE30 = 0,	// 30%
	kCAM_AE_SPOT_1,			// 1% SPOT
	NUMBER_OF_CAM_AE_MODE
} CAM_AE_MODE, *PCAM_AE_MODE;

// WB COLOR TEMPERATURE
typedef enum tagCAM_WB_COLOR_TEMPERATURE
{
	kCAM_WB_COLOR_TEMP3000 = 0,
	kCAM_WB_COLOR_TEMP3700,
	kCAM_WB_COLOR_TEMP4000,
	kCAM_WB_COLOR_TEMP4500,
	kCAM_WB_COLOR_TEMP5500,
	kCAM_WB_COLOR_TEMP6500,
	kCAM_WB_COLOR_TEMP_CUSTOM,
	NUMBER_OF_CAM_WB_COLOR_TEMPERATURE	
} CAM_WB_COLOR_TEMPERATURE, *PCAM_WB_COLOR_TEMPERATURE;


/////////////////////////////////////////////////////////////////
// DP73/DP80 New Add 


// ROTATE RATIONALS 
typedef struct tagCAM_ROTATE_RATIONALS
{
	CAM_RATIONAL camRational[10];

}CAM_ROTATE_RATIONALS, *PCAM_ROTATE_RATIONALS;

// ANTI HALATION MODE 
typedef enum tagCAM_IP_ANTI_HALATION_MODE
{
	kCAM_IP_ANTI_HALATION_OFF = 0,
	kCAM_IP_ANTI_HALATION_ON,

}CAM_IP_ANTI_HALATION_MODE, *PCAM_IP_ANTI_HALATION_MODE;

// NOISE SUPPRESSION INFO 
typedef struct
{
	long lNoiseSupSlp1[8];
	long lNoiseSupSlp2[8];
	long lNoiseSupBin[8];

}CAM_IP_NOISE_SUPPRESSION_INFO, *PCAM_IP_NOISE_SUPPRESSION_INFO;

// DEV NR MODE 
typedef enum tagCAM_IP_DEV_NR_MODE
{
	kCAM_IP_NR_OFF = 0,
	kCAM_IP_NR_LOW,
	kCAM_IP_NR_MIDDLE,
	kCAM_IP_NR_HIGH,
}CAM_IP_DEV_NR_MODE, *PCAM_IP_DEV_NR_MODE;

// BLEACH CORRECTION MODE 
typedef enum tagCAM_IP_BLEACH_CORRECTION_MODE
{
	kCAM_IP_BLEACH_CORRECTION_OFF = 0,
	kCAM_IP_BLEACH_CORRECTION_ON,

}CAM_IP_BLEACH_CORRECTION_MODE, *PCAM_IP_BLEACH_CORRECTION_MODE;

// 8COLOR ADJUSTMENT MODE 
typedef enum tagCAM_IP_8COLOR_ADJUSTMENT_MODE
{
	kCAM_IP_8COLOR_ADJUSTMENT_OFF = 0,
	kCAM_IP_8COLOR_ADJUSTMENT_AUTO,
	kCAM_IP_8COLOR_ADJUSTMENT_CUSTOM,

}CAM_IP_8COLOR_ADJUSTMENT_MODE, *PCAM_IP_8COLOR_ADJUSTMENT_MODE;

// SHIFT MODE 
typedef enum tagCAM_SIA_SHIFT_MODE
{
	kCAM_SIA_NO_SHIFT_MODE = 0,
	kCAM_SIA_9_SHIFT_MODE,
	kCAM_SIA_3CCD_4_SHIFT_MODE,
	kCAM_SIA_3CCD_36_SHIFT_MODE,
	kCAM_SIA_SDZ_SHIFT_MODE,

}CAM_SIA_SHIFT_MODE, *PCAM_SIA_SHIFT_MODE;

// AE SFL2 MODE 
typedef enum tagCAM_AE_SFL2_MODE
{
	kCAM_AE_SFL2_Y_MODE = 0,
	kCAM_AE_SFL2_RGB_MODE,

}CAM_AE_SFL2_MODE, *PCAM_AE_SFL2_MODE;

// PIXEL DEFECTS MODE
typedef enum tagCAM_IP_PIXEC_DEFECTS_MODE
{
	kCAM_IP_PIXEL_DEFECTS_MODE_OFF = 0,
	kCAM_IP_PIXEL_DEFECTS_MODE_ON,
}CAM_IP_PIXEL_DEFECTS_MODE, *PCAM_IP_PIXEL_DEFECTS_MODE;

// RANDOM TRIGGER TYPE (only for DP80)
typedef enum tagCAM_SIA_RANDOM_TRIGGER_TYPE
{
	kCAM_SIA_RT_EGDE_TYPE = 0,
	kCAM_SIA_RT_LEVEL_TYPE,
	kCAM_SIA_RT_COMMAND_TYPE,
}CAM_SIA_RANDOM_TRIGGER_TYPE, *PCAM_SIA_RANDOM_TRIGGER_TYPE;


/////////////////////////////////////////////////////////////////
// DP22/DP27 New Add 


// Shadin Mode
typedef enum tagCAM_IP_SHADING_MODE
{
	kCAM_IP_SHADING_OFF = 0,			// off 
	kCAM_IP_SHADING_BLACK,				// Only black 
	kCAM_IP_SHADING_WHITE,				// Only white 
	kCAM_IP_SHADING_BLACK_AND_WHITE,	// both black and white 
}CAM_IP_SHADING_MODE;

#endif	//}}	___CAMERA_STD_H___
